// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mychain/maincoin/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2f50e7843e7310, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2f50e7843e7310, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgBuyMaincoin defines the MsgBuyMaincoin message.
type MsgBuyMaincoin struct {
	Buyer  string     `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgBuyMaincoin) Reset()         { *m = MsgBuyMaincoin{} }
func (m *MsgBuyMaincoin) String() string { return proto.CompactTextString(m) }
func (*MsgBuyMaincoin) ProtoMessage()    {}
func (*MsgBuyMaincoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2f50e7843e7310, []int{2}
}
func (m *MsgBuyMaincoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyMaincoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyMaincoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyMaincoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyMaincoin.Merge(m, src)
}
func (m *MsgBuyMaincoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyMaincoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyMaincoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyMaincoin proto.InternalMessageInfo

func (m *MsgBuyMaincoin) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgBuyMaincoin) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// SegmentPurchase represents a purchase within a single segment
type SegmentPurchase struct {
	SegmentNumber          uint64 `protobuf:"varint,1,opt,name=segment_number,json=segmentNumber,proto3" json:"segment_number,omitempty"`
	TokensBought           string `protobuf:"bytes,2,opt,name=tokens_bought,json=tokensBought,proto3" json:"tokens_bought,omitempty"`
	PricePerToken          string `protobuf:"bytes,3,opt,name=price_per_token,json=pricePerToken,proto3" json:"price_per_token,omitempty"`
	SegmentCost            string `protobuf:"bytes,4,opt,name=segment_cost,json=segmentCost,proto3" json:"segment_cost,omitempty"`
	DevAllocation          string `protobuf:"bytes,5,opt,name=dev_allocation,json=devAllocation,proto3" json:"dev_allocation,omitempty"`
	UserTokens             string `protobuf:"bytes,6,opt,name=user_tokens,json=userTokens,proto3" json:"user_tokens,omitempty"`
	IsComplete             bool   `protobuf:"varint,7,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`
	TokensInSegment        string `protobuf:"bytes,8,opt,name=tokens_in_segment,json=tokensInSegment,proto3" json:"tokens_in_segment,omitempty"`
	TokensNeededToComplete string `protobuf:"bytes,9,opt,name=tokens_needed_to_complete,json=tokensNeededToComplete,proto3" json:"tokens_needed_to_complete,omitempty"`
}

func (m *SegmentPurchase) Reset()         { *m = SegmentPurchase{} }
func (m *SegmentPurchase) String() string { return proto.CompactTextString(m) }
func (*SegmentPurchase) ProtoMessage()    {}
func (*SegmentPurchase) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2f50e7843e7310, []int{3}
}
func (m *SegmentPurchase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentPurchase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentPurchase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentPurchase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentPurchase.Merge(m, src)
}
func (m *SegmentPurchase) XXX_Size() int {
	return m.Size()
}
func (m *SegmentPurchase) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentPurchase.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentPurchase proto.InternalMessageInfo

func (m *SegmentPurchase) GetSegmentNumber() uint64 {
	if m != nil {
		return m.SegmentNumber
	}
	return 0
}

func (m *SegmentPurchase) GetTokensBought() string {
	if m != nil {
		return m.TokensBought
	}
	return ""
}

func (m *SegmentPurchase) GetPricePerToken() string {
	if m != nil {
		return m.PricePerToken
	}
	return ""
}

func (m *SegmentPurchase) GetSegmentCost() string {
	if m != nil {
		return m.SegmentCost
	}
	return ""
}

func (m *SegmentPurchase) GetDevAllocation() string {
	if m != nil {
		return m.DevAllocation
	}
	return ""
}

func (m *SegmentPurchase) GetUserTokens() string {
	if m != nil {
		return m.UserTokens
	}
	return ""
}

func (m *SegmentPurchase) GetIsComplete() bool {
	if m != nil {
		return m.IsComplete
	}
	return false
}

func (m *SegmentPurchase) GetTokensInSegment() string {
	if m != nil {
		return m.TokensInSegment
	}
	return ""
}

func (m *SegmentPurchase) GetTokensNeededToComplete() string {
	if m != nil {
		return m.TokensNeededToComplete
	}
	return ""
}

// MsgBuyMaincoinResponse defines the MsgBuyMaincoinResponse message.
type MsgBuyMaincoinResponse struct {
	// total tokens bought across all segments
	TotalTokensBought string `protobuf:"bytes,1,opt,name=total_tokens_bought,json=totalTokensBought,proto3" json:"total_tokens_bought,omitempty"`
	// total amount paid
	TotalPaid string `protobuf:"bytes,2,opt,name=total_paid,json=totalPaid,proto3" json:"total_paid,omitempty"`
	// average price per token
	AveragePrice string `protobuf:"bytes,3,opt,name=average_price,json=averagePrice,proto3" json:"average_price,omitempty"`
	// breakdown by segment
	Segments []*SegmentPurchase `protobuf:"bytes,4,rep,name=segments,proto3" json:"segments,omitempty"`
	// remaining funds returned (if hit segment limit)
	RemainingFunds string `protobuf:"bytes,5,opt,name=remaining_funds,json=remainingFunds,proto3" json:"remaining_funds,omitempty"`
	// informational message
	Message string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *MsgBuyMaincoinResponse) Reset()         { *m = MsgBuyMaincoinResponse{} }
func (m *MsgBuyMaincoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBuyMaincoinResponse) ProtoMessage()    {}
func (*MsgBuyMaincoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2f50e7843e7310, []int{4}
}
func (m *MsgBuyMaincoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyMaincoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyMaincoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyMaincoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyMaincoinResponse.Merge(m, src)
}
func (m *MsgBuyMaincoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyMaincoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyMaincoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyMaincoinResponse proto.InternalMessageInfo

func (m *MsgBuyMaincoinResponse) GetTotalTokensBought() string {
	if m != nil {
		return m.TotalTokensBought
	}
	return ""
}

func (m *MsgBuyMaincoinResponse) GetTotalPaid() string {
	if m != nil {
		return m.TotalPaid
	}
	return ""
}

func (m *MsgBuyMaincoinResponse) GetAveragePrice() string {
	if m != nil {
		return m.AveragePrice
	}
	return ""
}

func (m *MsgBuyMaincoinResponse) GetSegments() []*SegmentPurchase {
	if m != nil {
		return m.Segments
	}
	return nil
}

func (m *MsgBuyMaincoinResponse) GetRemainingFunds() string {
	if m != nil {
		return m.RemainingFunds
	}
	return ""
}

func (m *MsgBuyMaincoinResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// MsgSellMaincoin defines the MsgSellMaincoin message.
type MsgSellMaincoin struct {
	Seller string     `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgSellMaincoin) Reset()         { *m = MsgSellMaincoin{} }
func (m *MsgSellMaincoin) String() string { return proto.CompactTextString(m) }
func (*MsgSellMaincoin) ProtoMessage()    {}
func (*MsgSellMaincoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2f50e7843e7310, []int{5}
}
func (m *MsgSellMaincoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellMaincoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellMaincoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellMaincoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellMaincoin.Merge(m, src)
}
func (m *MsgSellMaincoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellMaincoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellMaincoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellMaincoin proto.InternalMessageInfo

func (m *MsgSellMaincoin) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgSellMaincoin) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// MsgSellMaincoinResponse defines the MsgSellMaincoinResponse message.
type MsgSellMaincoinResponse struct {
	// amount of testusd refunded
	AmountRefunded types.Coin `protobuf:"bytes,1,opt,name=amount_refunded,json=amountRefunded,proto3" json:"amount_refunded"`
}

func (m *MsgSellMaincoinResponse) Reset()         { *m = MsgSellMaincoinResponse{} }
func (m *MsgSellMaincoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSellMaincoinResponse) ProtoMessage()    {}
func (*MsgSellMaincoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2f50e7843e7310, []int{6}
}
func (m *MsgSellMaincoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellMaincoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellMaincoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellMaincoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellMaincoinResponse.Merge(m, src)
}
func (m *MsgSellMaincoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellMaincoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellMaincoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellMaincoinResponse proto.InternalMessageInfo

func (m *MsgSellMaincoinResponse) GetAmountRefunded() types.Coin {
	if m != nil {
		return m.AmountRefunded
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "mychain.maincoin.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "mychain.maincoin.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgBuyMaincoin)(nil), "mychain.maincoin.v1.MsgBuyMaincoin")
	proto.RegisterType((*SegmentPurchase)(nil), "mychain.maincoin.v1.SegmentPurchase")
	proto.RegisterType((*MsgBuyMaincoinResponse)(nil), "mychain.maincoin.v1.MsgBuyMaincoinResponse")
	proto.RegisterType((*MsgSellMaincoin)(nil), "mychain.maincoin.v1.MsgSellMaincoin")
	proto.RegisterType((*MsgSellMaincoinResponse)(nil), "mychain.maincoin.v1.MsgSellMaincoinResponse")
}

func init() { proto.RegisterFile("mychain/maincoin/v1/tx.proto", fileDescriptor_2e2f50e7843e7310) }

var fileDescriptor_2e2f50e7843e7310 = []byte{
	// 821 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcb, 0x6f, 0xe3, 0x44,
	0x18, 0xaf, 0xfb, 0xc8, 0x36, 0x5f, 0xd2, 0x46, 0x9d, 0xad, 0xba, 0x6e, 0x80, 0x6c, 0xf0, 0xf2,
	0xa8, 0x0a, 0xd8, 0x6a, 0x11, 0x20, 0xf6, 0x80, 0xd8, 0x54, 0x42, 0x70, 0xe8, 0x2a, 0x72, 0xcb,
	0x85, 0x8b, 0x35, 0xb6, 0x07, 0xc7, 0x5a, 0x7b, 0xc6, 0xf2, 0x8c, 0xa3, 0xcd, 0x0d, 0x71, 0xe4,
	0x04, 0xff, 0x05, 0xc7, 0x1e, 0xe0, 0xce, 0x71, 0x8f, 0x2b, 0x4e, 0x9c, 0x10, 0x6a, 0x0f, 0xfd,
	0x17, 0x38, 0xa2, 0x79, 0xc4, 0x79, 0x28, 0x95, 0x2a, 0x2e, 0x51, 0xe6, 0xf7, 0xfb, 0x7d, 0xef,
	0x6f, 0xc6, 0xf0, 0x66, 0x3e, 0x89, 0x46, 0x38, 0xa5, 0x5e, 0x8e, 0x53, 0x1a, 0xb1, 0x94, 0x7a,
	0xe3, 0x13, 0x4f, 0xbc, 0x74, 0x8b, 0x92, 0x09, 0x86, 0x1e, 0x1a, 0xd6, 0x9d, 0xb2, 0xee, 0xf8,
	0xa4, 0xbb, 0x87, 0xf3, 0x94, 0x32, 0x4f, 0xfd, 0x6a, 0x5d, 0xb7, 0x17, 0x31, 0x9e, 0x33, 0xee,
	0x85, 0x98, 0x13, 0x6f, 0x7c, 0x12, 0x12, 0x81, 0x4f, 0x3c, 0xa5, 0xd7, 0xfc, 0x23, 0xc3, 0xe7,
	0x3c, 0x91, 0xfe, 0x73, 0x9e, 0x18, 0xe2, 0x50, 0x13, 0x81, 0x3a, 0x79, 0xfa, 0x60, 0xa8, 0xfd,
	0x84, 0x25, 0x4c, 0xe3, 0xf2, 0x9f, 0x41, 0xfb, 0xab, 0xf2, 0x2d, 0x70, 0x89, 0x73, 0x63, 0xe7,
	0xfc, 0x61, 0x41, 0xe7, 0x9c, 0x27, 0xdf, 0x16, 0x31, 0x16, 0x64, 0xa8, 0x18, 0xf4, 0x29, 0x34,
	0x71, 0x25, 0x46, 0xac, 0x4c, 0xc5, 0xc4, 0xb6, 0xfa, 0xd6, 0x51, 0x73, 0x60, 0xff, 0xf9, 0xdb,
	0x47, 0xfb, 0x26, 0xe0, 0xb3, 0x38, 0x2e, 0x09, 0xe7, 0x17, 0xa2, 0x4c, 0x69, 0xe2, 0xcf, 0xa4,
	0xe8, 0x0b, 0x68, 0x68, 0xdf, 0xf6, 0x7a, 0xdf, 0x3a, 0x6a, 0x9d, 0xbe, 0xe1, 0xae, 0x68, 0x88,
	0xab, 0x83, 0x0c, 0x9a, 0xaf, 0xfe, 0x7e, 0xbc, 0xf6, 0xeb, 0xed, 0xd5, 0xb1, 0xe5, 0x1b, 0xab,
	0xa7, 0x9f, 0xfc, 0x78, 0x7b, 0x75, 0x3c, 0xf3, 0xf7, 0xd3, 0xed, 0xd5, 0xb1, 0x33, 0x2d, 0xe0,
	0xe5, 0xac, 0x84, 0xa5, 0x74, 0x9d, 0x43, 0x78, 0xb4, 0x04, 0xf9, 0x84, 0x17, 0x8c, 0x72, 0xe2,
	0xbc, 0x80, 0xdd, 0x73, 0x9e, 0x0c, 0xaa, 0xc9, 0xb9, 0x31, 0x46, 0xfb, 0xb0, 0x15, 0x56, 0x13,
	0x52, 0xea, 0xba, 0x7c, 0x7d, 0x40, 0x9f, 0x41, 0x03, 0xe7, 0xac, 0xa2, 0xc2, 0x64, 0x7e, 0xe8,
	0x9a, 0x5a, 0xe5, 0x88, 0x5c, 0x33, 0x22, 0xf7, 0x8c, 0xa5, 0x74, 0xb0, 0x29, 0xf3, 0xf6, 0x8d,
	0xfc, 0x29, 0xc8, 0x94, 0xb5, 0x13, 0xe7, 0xdf, 0x75, 0xe8, 0x5c, 0x90, 0x24, 0x27, 0x54, 0x0c,
	0xab, 0x32, 0x1a, 0x61, 0x4e, 0xd0, 0xbb, 0xb0, 0xcb, 0x35, 0x14, 0xd0, 0x2a, 0x0f, 0x4d, 0xdc,
	0x4d, 0x7f, 0xc7, 0xa0, 0xcf, 0x15, 0x88, 0x9e, 0xc0, 0x8e, 0x60, 0x2f, 0x08, 0xe5, 0x41, 0xc8,
	0xaa, 0x64, 0xa4, 0xd3, 0x68, 0xfa, 0x6d, 0x0d, 0x0e, 0x14, 0x86, 0xde, 0x83, 0x4e, 0x51, 0xa6,
	0x11, 0x09, 0x0a, 0x52, 0x06, 0x8a, 0xb1, 0x37, 0x94, 0x6c, 0x47, 0xc1, 0x43, 0x52, 0x5e, 0x4a,
	0x10, 0xbd, 0x0d, 0xed, 0x69, 0xcc, 0x88, 0x71, 0x61, 0x6f, 0x2a, 0x51, 0xcb, 0x60, 0x67, 0x8c,
	0x0b, 0x99, 0x56, 0x4c, 0xc6, 0x01, 0xce, 0x32, 0x16, 0x61, 0x91, 0x32, 0x6a, 0x6f, 0x69, 0x4f,
	0x31, 0x19, 0x3f, 0xab, 0x41, 0xf4, 0x18, 0x5a, 0x15, 0x9f, 0x06, 0xe3, 0x76, 0x43, 0x69, 0x40,
	0x42, 0x2a, 0x12, 0x97, 0x82, 0x94, 0x07, 0x11, 0xcb, 0x8b, 0x8c, 0x08, 0x62, 0x3f, 0xe8, 0x5b,
	0x47, 0xdb, 0x3e, 0xa4, 0xfc, 0xcc, 0x20, 0xe8, 0x18, 0xf6, 0x4c, 0x61, 0x29, 0x0d, 0x4c, 0x06,
	0xf6, 0xb6, 0xf2, 0xd3, 0xd1, 0xc4, 0x37, 0xd4, 0xf4, 0x0c, 0x7d, 0x0e, 0x87, 0x46, 0x4b, 0x09,
	0x89, 0x49, 0x1c, 0x08, 0x36, 0x73, 0xdd, 0x54, 0x36, 0x07, 0x5a, 0xf0, 0x5c, 0xf1, 0x97, 0x6c,
	0x1a, 0xc6, 0xf9, 0x65, 0x1d, 0x0e, 0x16, 0x07, 0x3d, 0x5d, 0x01, 0xe4, 0xc2, 0x43, 0xc1, 0x04,
	0xce, 0x82, 0xc5, 0x06, 0xeb, 0xf1, 0xef, 0x29, 0xea, 0x72, 0xbe, 0xcb, 0x6f, 0x01, 0x68, 0x7d,
	0x81, 0xd3, 0xd8, 0xcc, 0xa1, 0xa9, 0x90, 0x21, 0x4e, 0x63, 0x39, 0x29, 0x3c, 0x26, 0x25, 0x4e,
	0x48, 0xa0, 0xba, 0x6e, 0x46, 0xd0, 0x36, 0xe0, 0x50, 0x62, 0xe8, 0x4b, 0xd8, 0x36, 0xb5, 0x72,
	0x7b, 0xb3, 0xbf, 0x71, 0xd4, 0x3a, 0x7d, 0x67, 0xe5, 0x55, 0x58, 0xda, 0x16, 0xbf, 0xb6, 0x42,
	0xef, 0x43, 0xa7, 0x24, 0x52, 0x9a, 0xd2, 0x24, 0xf8, 0xbe, 0xa2, 0x31, 0x37, 0x13, 0xda, 0xad,
	0xe1, 0xaf, 0x24, 0x8a, 0x6c, 0x78, 0x90, 0x13, 0xce, 0x71, 0x42, 0xcc, 0x78, 0xa6, 0x47, 0x87,
	0xa9, 0x8b, 0x7d, 0x41, 0xb2, 0xac, 0x5e, 0xfe, 0x03, 0x68, 0x70, 0x92, 0x65, 0xf5, 0xf6, 0x9b,
	0xd3, 0xff, 0x5f, 0xff, 0x96, 0x5c, 0x7f, 0xe3, 0xc5, 0x89, 0xd4, 0x3d, 0x9c, 0x0f, 0x58, 0x0f,
	0xe1, 0x6b, 0xe8, 0x68, 0x8b, 0xa0, 0x24, 0xb2, 0x1a, 0x12, 0xab, 0x0c, 0xee, 0x11, 0x69, 0x57,
	0xdb, 0xf9, 0xc6, 0xec, 0xf4, 0xf7, 0x75, 0xd8, 0x38, 0xe7, 0x09, 0x0a, 0xa1, 0xbd, 0xf0, 0x66,
	0xad, 0x6e, 0xf0, 0xd2, 0xbb, 0xd0, 0xfd, 0xf0, 0x3e, 0xaa, 0x3a, 0xeb, 0x00, 0x5a, 0xf3, 0x4f,
	0xc7, 0x93, 0xbb, 0x8c, 0xe7, 0x44, 0xdd, 0x0f, 0xee, 0x21, 0xaa, 0x03, 0x84, 0xd0, 0x5e, 0x98,
	0xcf, 0x9d, 0x45, 0xcc, 0xab, 0xee, 0x2e, 0x62, 0x55, 0xeb, 0xbb, 0x5b, 0x3f, 0xc8, 0x37, 0x76,
	0x70, 0xfa, 0xea, 0xba, 0x67, 0xbd, 0xbe, 0xee, 0x59, 0xff, 0x5c, 0xf7, 0xac, 0x9f, 0x6f, 0x7a,
	0x6b, 0xaf, 0x6f, 0x7a, 0x6b, 0x7f, 0xdd, 0xf4, 0xd6, 0xbe, 0xb3, 0x57, 0x3c, 0xb1, 0x62, 0x52,
	0x10, 0x1e, 0x36, 0xd4, 0x27, 0xe2, 0xe3, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x98, 0x2b, 0x79,
	0x15, 0xf6, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// BuyMaincoin defines the BuyMaincoin RPC.
	BuyMaincoin(ctx context.Context, in *MsgBuyMaincoin, opts ...grpc.CallOption) (*MsgBuyMaincoinResponse, error)
	// SellMaincoin defines the SellMaincoin RPC.
	SellMaincoin(ctx context.Context, in *MsgSellMaincoin, opts ...grpc.CallOption) (*MsgSellMaincoinResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/mychain.maincoin.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BuyMaincoin(ctx context.Context, in *MsgBuyMaincoin, opts ...grpc.CallOption) (*MsgBuyMaincoinResponse, error) {
	out := new(MsgBuyMaincoinResponse)
	err := c.cc.Invoke(ctx, "/mychain.maincoin.v1.Msg/BuyMaincoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SellMaincoin(ctx context.Context, in *MsgSellMaincoin, opts ...grpc.CallOption) (*MsgSellMaincoinResponse, error) {
	out := new(MsgSellMaincoinResponse)
	err := c.cc.Invoke(ctx, "/mychain.maincoin.v1.Msg/SellMaincoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// BuyMaincoin defines the BuyMaincoin RPC.
	BuyMaincoin(context.Context, *MsgBuyMaincoin) (*MsgBuyMaincoinResponse, error)
	// SellMaincoin defines the SellMaincoin RPC.
	SellMaincoin(context.Context, *MsgSellMaincoin) (*MsgSellMaincoinResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) BuyMaincoin(ctx context.Context, req *MsgBuyMaincoin) (*MsgBuyMaincoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyMaincoin not implemented")
}
func (*UnimplementedMsgServer) SellMaincoin(ctx context.Context, req *MsgSellMaincoin) (*MsgSellMaincoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellMaincoin not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mychain.maincoin.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BuyMaincoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBuyMaincoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BuyMaincoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mychain.maincoin.v1.Msg/BuyMaincoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BuyMaincoin(ctx, req.(*MsgBuyMaincoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SellMaincoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSellMaincoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SellMaincoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mychain.maincoin.v1.Msg/SellMaincoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SellMaincoin(ctx, req.(*MsgSellMaincoin))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mychain.maincoin.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "BuyMaincoin",
			Handler:    _Msg_BuyMaincoin_Handler,
		},
		{
			MethodName: "SellMaincoin",
			Handler:    _Msg_SellMaincoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mychain/maincoin/v1/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBuyMaincoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyMaincoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyMaincoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SegmentPurchase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentPurchase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentPurchase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokensNeededToComplete) > 0 {
		i -= len(m.TokensNeededToComplete)
		copy(dAtA[i:], m.TokensNeededToComplete)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokensNeededToComplete)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TokensInSegment) > 0 {
		i -= len(m.TokensInSegment)
		copy(dAtA[i:], m.TokensInSegment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokensInSegment)))
		i--
		dAtA[i] = 0x42
	}
	if m.IsComplete {
		i--
		if m.IsComplete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.UserTokens) > 0 {
		i -= len(m.UserTokens)
		copy(dAtA[i:], m.UserTokens)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserTokens)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DevAllocation) > 0 {
		i -= len(m.DevAllocation)
		copy(dAtA[i:], m.DevAllocation)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DevAllocation)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SegmentCost) > 0 {
		i -= len(m.SegmentCost)
		copy(dAtA[i:], m.SegmentCost)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SegmentCost)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PricePerToken) > 0 {
		i -= len(m.PricePerToken)
		copy(dAtA[i:], m.PricePerToken)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PricePerToken)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokensBought) > 0 {
		i -= len(m.TokensBought)
		copy(dAtA[i:], m.TokensBought)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokensBought)))
		i--
		dAtA[i] = 0x12
	}
	if m.SegmentNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SegmentNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuyMaincoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyMaincoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyMaincoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RemainingFunds) > 0 {
		i -= len(m.RemainingFunds)
		copy(dAtA[i:], m.RemainingFunds)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RemainingFunds)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Segments) > 0 {
		for iNdEx := len(m.Segments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Segments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.AveragePrice) > 0 {
		i -= len(m.AveragePrice)
		copy(dAtA[i:], m.AveragePrice)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AveragePrice)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalPaid) > 0 {
		i -= len(m.TotalPaid)
		copy(dAtA[i:], m.TotalPaid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TotalPaid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TotalTokensBought) > 0 {
		i -= len(m.TotalTokensBought)
		copy(dAtA[i:], m.TotalTokensBought)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TotalTokensBought)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSellMaincoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellMaincoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellMaincoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSellMaincoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellMaincoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellMaincoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AmountRefunded.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBuyMaincoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *SegmentPurchase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SegmentNumber != 0 {
		n += 1 + sovTx(uint64(m.SegmentNumber))
	}
	l = len(m.TokensBought)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PricePerToken)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SegmentCost)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DevAllocation)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserTokens)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IsComplete {
		n += 2
	}
	l = len(m.TokensInSegment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokensNeededToComplete)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBuyMaincoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TotalTokensBought)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TotalPaid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AveragePrice)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Segments) > 0 {
		for _, e := range m.Segments {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.RemainingFunds)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSellMaincoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSellMaincoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AmountRefunded.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyMaincoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyMaincoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyMaincoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentPurchase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentPurchase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentPurchase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentNumber", wireType)
			}
			m.SegmentNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensBought", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokensBought = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricePerToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PricePerToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentCost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentCost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAllocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAllocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserTokens = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsComplete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsComplete = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensInSegment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokensInSegment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensNeededToComplete", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokensNeededToComplete = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyMaincoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyMaincoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyMaincoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTokensBought", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalTokensBought = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPaid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalPaid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AveragePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AveragePrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segments = append(m.Segments, &SegmentPurchase{})
			if err := m.Segments[len(m.Segments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingFunds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemainingFunds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellMaincoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellMaincoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellMaincoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellMaincoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellMaincoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellMaincoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountRefunded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountRefunded.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
