// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mychain/maincoin/v1/segment_history.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SegmentPurchaseRecord stores details of tokens bought within a specific segment
type SegmentPurchaseRecord struct {
	SegmentNumber uint64                      `protobuf:"varint,1,opt,name=segment_number,json=segmentNumber,proto3" json:"segment_number,omitempty"`
	Buyer         string                      `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
	TokensBought  cosmossdk_io_math.Int       `protobuf:"bytes,3,opt,name=tokens_bought,json=tokensBought,proto3,customtype=cosmossdk.io/math.Int" json:"tokens_bought"`
	UserTokens    cosmossdk_io_math.Int       `protobuf:"bytes,4,opt,name=user_tokens,json=userTokens,proto3,customtype=cosmossdk.io/math.Int" json:"user_tokens"`
	DevAllocation cosmossdk_io_math.Int       `protobuf:"bytes,5,opt,name=dev_allocation,json=devAllocation,proto3,customtype=cosmossdk.io/math.Int" json:"dev_allocation"`
	PricePerToken cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=price_per_token,json=pricePerToken,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price_per_token"`
	Cost          cosmossdk_io_math.Int       `protobuf:"bytes,7,opt,name=cost,proto3,customtype=cosmossdk.io/math.Int" json:"cost"`
	IsComplete    bool                        `protobuf:"varint,8,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`
	TxHash        string                      `protobuf:"bytes,9,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	BlockHeight   int64                       `protobuf:"varint,10,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Timestamp     time.Time                   `protobuf:"bytes,11,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
}

func (m *SegmentPurchaseRecord) Reset()         { *m = SegmentPurchaseRecord{} }
func (m *SegmentPurchaseRecord) String() string { return proto.CompactTextString(m) }
func (*SegmentPurchaseRecord) ProtoMessage()    {}
func (*SegmentPurchaseRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f533e5164146594, []int{0}
}
func (m *SegmentPurchaseRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentPurchaseRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentPurchaseRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentPurchaseRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentPurchaseRecord.Merge(m, src)
}
func (m *SegmentPurchaseRecord) XXX_Size() int {
	return m.Size()
}
func (m *SegmentPurchaseRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentPurchaseRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentPurchaseRecord proto.InternalMessageInfo

func (m *SegmentPurchaseRecord) GetSegmentNumber() uint64 {
	if m != nil {
		return m.SegmentNumber
	}
	return 0
}

func (m *SegmentPurchaseRecord) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *SegmentPurchaseRecord) GetIsComplete() bool {
	if m != nil {
		return m.IsComplete
	}
	return false
}

func (m *SegmentPurchaseRecord) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *SegmentPurchaseRecord) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *SegmentPurchaseRecord) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

// SegmentHistory stores all purchases for a specific segment
type SegmentHistory struct {
	SegmentNumber      uint64                  `protobuf:"varint,1,opt,name=segment_number,json=segmentNumber,proto3" json:"segment_number,omitempty"`
	Purchases          []SegmentPurchaseRecord `protobuf:"bytes,2,rep,name=purchases,proto3" json:"purchases"`
	TotalTokensSold    cosmossdk_io_math.Int   `protobuf:"bytes,3,opt,name=total_tokens_sold,json=totalTokensSold,proto3,customtype=cosmossdk.io/math.Int" json:"total_tokens_sold"`
	TotalDevAllocation cosmossdk_io_math.Int   `protobuf:"bytes,4,opt,name=total_dev_allocation,json=totalDevAllocation,proto3,customtype=cosmossdk.io/math.Int" json:"total_dev_allocation"`
	TotalRevenue       cosmossdk_io_math.Int   `protobuf:"bytes,5,opt,name=total_revenue,json=totalRevenue,proto3,customtype=cosmossdk.io/math.Int" json:"total_revenue"`
	IsComplete         bool                    `protobuf:"varint,6,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`
	CompletedAtHeight  int64                   `protobuf:"varint,7,opt,name=completed_at_height,json=completedAtHeight,proto3" json:"completed_at_height,omitempty"`
	CompletedAt        *time.Time              `protobuf:"bytes,8,opt,name=completed_at,json=completedAt,proto3,stdtime" json:"completed_at,omitempty"`
}

func (m *SegmentHistory) Reset()         { *m = SegmentHistory{} }
func (m *SegmentHistory) String() string { return proto.CompactTextString(m) }
func (*SegmentHistory) ProtoMessage()    {}
func (*SegmentHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f533e5164146594, []int{1}
}
func (m *SegmentHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentHistory.Merge(m, src)
}
func (m *SegmentHistory) XXX_Size() int {
	return m.Size()
}
func (m *SegmentHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentHistory.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentHistory proto.InternalMessageInfo

func (m *SegmentHistory) GetSegmentNumber() uint64 {
	if m != nil {
		return m.SegmentNumber
	}
	return 0
}

func (m *SegmentHistory) GetPurchases() []SegmentPurchaseRecord {
	if m != nil {
		return m.Purchases
	}
	return nil
}

func (m *SegmentHistory) GetIsComplete() bool {
	if m != nil {
		return m.IsComplete
	}
	return false
}

func (m *SegmentHistory) GetCompletedAtHeight() int64 {
	if m != nil {
		return m.CompletedAtHeight
	}
	return 0
}

func (m *SegmentHistory) GetCompletedAt() *time.Time {
	if m != nil {
		return m.CompletedAt
	}
	return nil
}

// UserPurchaseHistory stores all purchases made by a specific user
type UserPurchaseHistory struct {
	Address           string                  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Purchases         []SegmentPurchaseRecord `protobuf:"bytes,2,rep,name=purchases,proto3" json:"purchases"`
	TotalTokensBought cosmossdk_io_math.Int   `protobuf:"bytes,3,opt,name=total_tokens_bought,json=totalTokensBought,proto3,customtype=cosmossdk.io/math.Int" json:"total_tokens_bought"`
	TotalSpent        cosmossdk_io_math.Int   `protobuf:"bytes,4,opt,name=total_spent,json=totalSpent,proto3,customtype=cosmossdk.io/math.Int" json:"total_spent"`
}

func (m *UserPurchaseHistory) Reset()         { *m = UserPurchaseHistory{} }
func (m *UserPurchaseHistory) String() string { return proto.CompactTextString(m) }
func (*UserPurchaseHistory) ProtoMessage()    {}
func (*UserPurchaseHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f533e5164146594, []int{2}
}
func (m *UserPurchaseHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPurchaseHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPurchaseHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPurchaseHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPurchaseHistory.Merge(m, src)
}
func (m *UserPurchaseHistory) XXX_Size() int {
	return m.Size()
}
func (m *UserPurchaseHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPurchaseHistory.DiscardUnknown(m)
}

var xxx_messageInfo_UserPurchaseHistory proto.InternalMessageInfo

func (m *UserPurchaseHistory) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserPurchaseHistory) GetPurchases() []SegmentPurchaseRecord {
	if m != nil {
		return m.Purchases
	}
	return nil
}

func init() {
	proto.RegisterType((*SegmentPurchaseRecord)(nil), "mychain.maincoin.v1.SegmentPurchaseRecord")
	proto.RegisterType((*SegmentHistory)(nil), "mychain.maincoin.v1.SegmentHistory")
	proto.RegisterType((*UserPurchaseHistory)(nil), "mychain.maincoin.v1.UserPurchaseHistory")
}

func init() {
	proto.RegisterFile("mychain/maincoin/v1/segment_history.proto", fileDescriptor_5f533e5164146594)
}

var fileDescriptor_5f533e5164146594 = []byte{
	// 665 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcf, 0x4e, 0xdb, 0x40,
	0x10, 0xc6, 0x63, 0x12, 0x12, 0xb2, 0x4e, 0x40, 0x6c, 0x40, 0x5d, 0x51, 0x35, 0x49, 0xa9, 0x2a,
	0xa5, 0x3d, 0xd8, 0x82, 0xde, 0x2b, 0x61, 0x38, 0x80, 0xda, 0x52, 0x64, 0xe8, 0xa5, 0x17, 0x6b,
	0x63, 0x4f, 0x6d, 0x0b, 0xdb, 0x6b, 0x79, 0xd7, 0x11, 0x79, 0x89, 0x8a, 0x37, 0xea, 0x95, 0x23,
	0xc7, 0xaa, 0x07, 0x5a, 0xc1, 0x73, 0x54, 0xaa, 0xbc, 0xb6, 0x49, 0xf8, 0xa3, 0xca, 0x95, 0x7a,
	0xcb, 0xce, 0xce, 0xf7, 0xed, 0x28, 0xdf, 0xcf, 0x83, 0x5e, 0x85, 0x53, 0xdb, 0xa3, 0x7e, 0xa4,
	0x87, 0xd4, 0x8f, 0x6c, 0xe6, 0x47, 0xfa, 0x64, 0x4b, 0xe7, 0xe0, 0x86, 0x10, 0x09, 0xcb, 0xf3,
	0xb9, 0x60, 0xc9, 0x54, 0x8b, 0x13, 0x26, 0x18, 0xee, 0x15, 0xad, 0x5a, 0xd9, 0xaa, 0x4d, 0xb6,
	0x36, 0xd6, 0x5c, 0xe6, 0x32, 0x79, 0xaf, 0x67, 0xbf, 0xf2, 0xd6, 0x8d, 0x81, 0xcb, 0x98, 0x1b,
	0x80, 0x2e, 0x4f, 0xe3, 0xf4, 0x8b, 0x2e, 0xfc, 0x10, 0xb8, 0xa0, 0x61, 0x9c, 0x37, 0x6c, 0x7e,
	0x6b, 0xa0, 0xf5, 0xe3, 0xfc, 0x95, 0xa3, 0x34, 0xb1, 0x3d, 0xca, 0xc1, 0x04, 0x9b, 0x25, 0x0e,
	0x7e, 0x89, 0x96, 0xcb, 0xe7, 0xa3, 0x34, 0x1c, 0x43, 0x42, 0x94, 0xa1, 0x32, 0x6a, 0x98, 0xdd,
	0xa2, 0x7a, 0x28, 0x8b, 0x78, 0x0d, 0x2d, 0x8e, 0xd3, 0x29, 0x24, 0x64, 0x61, 0xa8, 0x8c, 0xda,
	0x66, 0x7e, 0xc0, 0x06, 0xea, 0x0a, 0x76, 0x0a, 0x11, 0xb7, 0xc6, 0x2c, 0x75, 0x3d, 0x41, 0xea,
	0xd9, 0xad, 0xf1, 0xec, 0xe2, 0x6a, 0x50, 0xfb, 0x71, 0x35, 0x58, 0xb7, 0x19, 0x0f, 0x19, 0xe7,
	0xce, 0xa9, 0xe6, 0x33, 0x3d, 0xa4, 0xc2, 0xd3, 0x0e, 0x22, 0x61, 0x76, 0x72, 0x8d, 0x21, 0x25,
	0xf8, 0x2d, 0x52, 0x53, 0x0e, 0x89, 0x95, 0x17, 0x49, 0xa3, 0x8a, 0x03, 0xca, 0x14, 0x27, 0x52,
	0x80, 0xf7, 0xd0, 0xb2, 0x03, 0x13, 0x8b, 0x06, 0x01, 0xb3, 0xa9, 0xf0, 0x59, 0x44, 0x16, 0xab,
	0x58, 0x74, 0x1d, 0x98, 0xec, 0xdc, 0x6a, 0xf0, 0x3b, 0xb4, 0x12, 0x27, 0xbe, 0x0d, 0x56, 0x5c,
	0x8e, 0x42, 0x9a, 0xd2, 0xe6, 0x45, 0x61, 0xf3, 0xf4, 0xa1, 0xcd, 0x7b, 0x70, 0xa9, 0x3d, 0xdd,
	0x03, 0xdb, 0xec, 0x4a, 0xed, 0x51, 0x31, 0x13, 0xde, 0x42, 0x0d, 0x9b, 0x71, 0x41, 0x5a, 0x55,
	0x06, 0x91, 0xad, 0x78, 0x80, 0x54, 0x9f, 0x5b, 0x36, 0x0b, 0xe3, 0x00, 0x04, 0x90, 0xa5, 0xa1,
	0x32, 0x5a, 0x32, 0x91, 0xcf, 0x77, 0x8b, 0x0a, 0x7e, 0x82, 0x5a, 0xe2, 0xcc, 0xf2, 0x28, 0xf7,
	0x48, 0x5b, 0x46, 0xd0, 0x14, 0x67, 0xfb, 0x94, 0x7b, 0xf8, 0x39, 0xea, 0x8c, 0x03, 0x66, 0x9f,
	0x5a, 0x1e, 0xf8, 0x59, 0x04, 0x68, 0xa8, 0x8c, 0xea, 0xa6, 0x2a, 0x6b, 0xfb, 0xb2, 0x84, 0x0d,
	0xd4, 0xbe, 0x05, 0x82, 0xa8, 0x43, 0x65, 0xa4, 0x6e, 0x6f, 0x68, 0x39, 0x32, 0x5a, 0x89, 0x8c,
	0x76, 0x52, 0x76, 0x18, 0x4b, 0xd9, 0xc0, 0xe7, 0x3f, 0x07, 0x8a, 0x39, 0x93, 0x6d, 0xfe, 0xae,
	0xa3, 0xe5, 0x82, 0xa0, 0xfd, 0x1c, 0xd3, 0xaa, 0xe8, 0x1c, 0xa2, 0x76, 0x5c, 0x30, 0xc7, 0xc9,
	0xc2, 0xb0, 0x3e, 0x52, 0xb7, 0x5f, 0x6b, 0x8f, 0xb0, 0xad, 0x3d, 0x0a, 0xa8, 0xd1, 0xc8, 0xa6,
	0x31, 0x67, 0x16, 0xf8, 0x00, 0xad, 0x0a, 0x26, 0x68, 0x50, 0x10, 0x63, 0x71, 0x16, 0x38, 0xd5,
	0xc0, 0x5b, 0x91, 0xba, 0x9c, 0x9b, 0x63, 0x16, 0x38, 0xf8, 0x23, 0x5a, 0xcb, 0xad, 0xee, 0x11,
	0x54, 0x09, 0x42, 0x2c, 0xa5, 0x7b, 0x77, 0x30, 0x92, 0x1f, 0x44, 0x66, 0x98, 0xc0, 0x04, 0xa2,
	0x14, 0xaa, 0xb1, 0xd8, 0x91, 0x1a, 0x33, 0x97, 0xdc, 0x47, 0xa1, 0xf9, 0x00, 0x05, 0x0d, 0xf5,
	0xca, 0x5b, 0xc7, 0xa2, 0xa2, 0x0c, 0xbe, 0x25, 0x83, 0x5f, 0xbd, 0xbd, 0xda, 0x11, 0x45, 0xfc,
	0xbb, 0xa8, 0x33, 0xdf, 0x2f, 0xe1, 0xfa, 0x3b, 0x01, 0x0d, 0x99, 0xbe, 0x3a, 0x67, 0xb5, 0xf9,
	0x75, 0x01, 0xf5, 0x3e, 0x71, 0x48, 0xca, 0x74, 0x4a, 0x08, 0x08, 0x6a, 0x51, 0xc7, 0x49, 0x80,
	0x73, 0x99, 0x7e, 0xdb, 0x2c, 0x8f, 0xff, 0x3d, 0xf7, 0x0f, 0xa8, 0x77, 0x27, 0xf7, 0x7f, 0x59,
	0x39, 0xab, 0x73, 0xc9, 0xcf, 0xf6, 0x4e, 0x6e, 0xc7, 0x63, 0x88, 0x44, 0xc5, 0xbd, 0x23, 0x15,
	0xc7, 0x99, 0xc0, 0xd8, 0xbe, 0xb8, 0xee, 0x2b, 0x97, 0xd7, 0x7d, 0xe5, 0xd7, 0x75, 0x5f, 0x39,
	0xbf, 0xe9, 0xd7, 0x2e, 0x6f, 0xfa, 0xb5, 0xef, 0x37, 0xfd, 0xda, 0x67, 0x52, 0xee, 0xf8, 0xb3,
	0xd9, 0x96, 0x17, 0xd3, 0x18, 0xf8, 0xb8, 0x29, 0xff, 0xeb, 0x37, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x9b, 0xf2, 0xc5, 0x3c, 0x06, 0x06, 0x00, 0x00,
}

func (m *SegmentPurchaseRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentPurchaseRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentPurchaseRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintSegmentHistory(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x5a
	if m.BlockHeight != 0 {
		i = encodeVarintSegmentHistory(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintSegmentHistory(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x4a
	}
	if m.IsComplete {
		i--
		if m.IsComplete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.Cost.Size()
		i -= size
		if _, err := m.Cost.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSegmentHistory(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.PricePerToken.Size()
		i -= size
		if _, err := m.PricePerToken.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSegmentHistory(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.DevAllocation.Size()
		i -= size
		if _, err := m.DevAllocation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSegmentHistory(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.UserTokens.Size()
		i -= size
		if _, err := m.UserTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSegmentHistory(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TokensBought.Size()
		i -= size
		if _, err := m.TokensBought.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSegmentHistory(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintSegmentHistory(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x12
	}
	if m.SegmentNumber != 0 {
		i = encodeVarintSegmentHistory(dAtA, i, uint64(m.SegmentNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SegmentHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompletedAt != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.CompletedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CompletedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintSegmentHistory(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x42
	}
	if m.CompletedAtHeight != 0 {
		i = encodeVarintSegmentHistory(dAtA, i, uint64(m.CompletedAtHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.IsComplete {
		i--
		if m.IsComplete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.TotalRevenue.Size()
		i -= size
		if _, err := m.TotalRevenue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSegmentHistory(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalDevAllocation.Size()
		i -= size
		if _, err := m.TotalDevAllocation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSegmentHistory(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TotalTokensSold.Size()
		i -= size
		if _, err := m.TotalTokensSold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSegmentHistory(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Purchases) > 0 {
		for iNdEx := len(m.Purchases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Purchases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSegmentHistory(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SegmentNumber != 0 {
		i = encodeVarintSegmentHistory(dAtA, i, uint64(m.SegmentNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserPurchaseHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPurchaseHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPurchaseHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalSpent.Size()
		i -= size
		if _, err := m.TotalSpent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSegmentHistory(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TotalTokensBought.Size()
		i -= size
		if _, err := m.TotalTokensBought.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSegmentHistory(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Purchases) > 0 {
		for iNdEx := len(m.Purchases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Purchases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSegmentHistory(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintSegmentHistory(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSegmentHistory(dAtA []byte, offset int, v uint64) int {
	offset -= sovSegmentHistory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SegmentPurchaseRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SegmentNumber != 0 {
		n += 1 + sovSegmentHistory(uint64(m.SegmentNumber))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovSegmentHistory(uint64(l))
	}
	l = m.TokensBought.Size()
	n += 1 + l + sovSegmentHistory(uint64(l))
	l = m.UserTokens.Size()
	n += 1 + l + sovSegmentHistory(uint64(l))
	l = m.DevAllocation.Size()
	n += 1 + l + sovSegmentHistory(uint64(l))
	l = m.PricePerToken.Size()
	n += 1 + l + sovSegmentHistory(uint64(l))
	l = m.Cost.Size()
	n += 1 + l + sovSegmentHistory(uint64(l))
	if m.IsComplete {
		n += 2
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovSegmentHistory(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovSegmentHistory(uint64(m.BlockHeight))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovSegmentHistory(uint64(l))
	return n
}

func (m *SegmentHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SegmentNumber != 0 {
		n += 1 + sovSegmentHistory(uint64(m.SegmentNumber))
	}
	if len(m.Purchases) > 0 {
		for _, e := range m.Purchases {
			l = e.Size()
			n += 1 + l + sovSegmentHistory(uint64(l))
		}
	}
	l = m.TotalTokensSold.Size()
	n += 1 + l + sovSegmentHistory(uint64(l))
	l = m.TotalDevAllocation.Size()
	n += 1 + l + sovSegmentHistory(uint64(l))
	l = m.TotalRevenue.Size()
	n += 1 + l + sovSegmentHistory(uint64(l))
	if m.IsComplete {
		n += 2
	}
	if m.CompletedAtHeight != 0 {
		n += 1 + sovSegmentHistory(uint64(m.CompletedAtHeight))
	}
	if m.CompletedAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CompletedAt)
		n += 1 + l + sovSegmentHistory(uint64(l))
	}
	return n
}

func (m *UserPurchaseHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSegmentHistory(uint64(l))
	}
	if len(m.Purchases) > 0 {
		for _, e := range m.Purchases {
			l = e.Size()
			n += 1 + l + sovSegmentHistory(uint64(l))
		}
	}
	l = m.TotalTokensBought.Size()
	n += 1 + l + sovSegmentHistory(uint64(l))
	l = m.TotalSpent.Size()
	n += 1 + l + sovSegmentHistory(uint64(l))
	return n
}

func sovSegmentHistory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSegmentHistory(x uint64) (n int) {
	return sovSegmentHistory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SegmentPurchaseRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSegmentHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentPurchaseRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentPurchaseRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentNumber", wireType)
			}
			m.SegmentNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensBought", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokensBought.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAllocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAllocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricePerToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PricePerToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsComplete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsComplete = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSegmentHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSegmentHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentNumber", wireType)
			}
			m.SegmentNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchases = append(m.Purchases, SegmentPurchaseRecord{})
			if err := m.Purchases[len(m.Purchases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTokensSold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalTokensSold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDevAllocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDevAllocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRevenue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRevenue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsComplete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsComplete = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedAtHeight", wireType)
			}
			m.CompletedAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletedAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompletedAt == nil {
				m.CompletedAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.CompletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSegmentHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPurchaseHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSegmentHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPurchaseHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPurchaseHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchases = append(m.Purchases, SegmentPurchaseRecord{})
			if err := m.Purchases[len(m.Purchases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTokensBought", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalTokensBought.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSpent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSpent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSegmentHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSegmentHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSegmentHistory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSegmentHistory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSegmentHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSegmentHistory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSegmentHistory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSegmentHistory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSegmentHistory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSegmentHistory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSegmentHistory = fmt.Errorf("proto: unexpected end of group")
)
