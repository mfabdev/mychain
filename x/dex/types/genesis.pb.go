// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mychain/dex/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the dex module's genesis state.
type GenesisState struct {
	// params defines all the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// next_order_id is the next order ID to be assigned
	NextOrderId uint64 `protobuf:"varint,2,opt,name=next_order_id,json=nextOrderId,proto3" json:"next_order_id,omitempty"`
	// trading_pairs contains all trading pairs
	TradingPairs []TradingPair `protobuf:"bytes,3,rep,name=trading_pairs,json=tradingPairs,proto3" json:"trading_pairs"`
	// orders contains all active orders
	Orders []Order `protobuf:"bytes,4,rep,name=orders,proto3" json:"orders"`
	// user_rewards contains user reward information
	UserRewards []UserReward `protobuf:"bytes,5,rep,name=user_rewards,json=userRewards,proto3" json:"user_rewards"`
	// liquidity_tiers contains tier definitions
	LiquidityTiers []LiquidityTier `protobuf:"bytes,6,rep,name=liquidity_tiers,json=liquidityTiers,proto3" json:"liquidity_tiers"`
	// order_rewards contains order reward information
	OrderRewards []OrderRewardInfo `protobuf:"bytes,7,rep,name=order_rewards,json=orderRewards,proto3" json:"order_rewards"`
	// price_references contains reference prices for tiers
	PriceReferences []PriceReference `protobuf:"bytes,8,rep,name=price_references,json=priceReferences,proto3" json:"price_references"`
	// volume_trackers contains volume tracking information
	VolumeTrackers []VolumeTracker `protobuf:"bytes,9,rep,name=volume_trackers,json=volumeTrackers,proto3" json:"volume_trackers"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_4436eb9629881fe7, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetNextOrderId() uint64 {
	if m != nil {
		return m.NextOrderId
	}
	return 0
}

func (m *GenesisState) GetTradingPairs() []TradingPair {
	if m != nil {
		return m.TradingPairs
	}
	return nil
}

func (m *GenesisState) GetOrders() []Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *GenesisState) GetUserRewards() []UserReward {
	if m != nil {
		return m.UserRewards
	}
	return nil
}

func (m *GenesisState) GetLiquidityTiers() []LiquidityTier {
	if m != nil {
		return m.LiquidityTiers
	}
	return nil
}

func (m *GenesisState) GetOrderRewards() []OrderRewardInfo {
	if m != nil {
		return m.OrderRewards
	}
	return nil
}

func (m *GenesisState) GetPriceReferences() []PriceReference {
	if m != nil {
		return m.PriceReferences
	}
	return nil
}

func (m *GenesisState) GetVolumeTrackers() []VolumeTracker {
	if m != nil {
		return m.VolumeTrackers
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "mychain.dex.v1.GenesisState")
}

func init() { proto.RegisterFile("mychain/dex/v1/genesis.proto", fileDescriptor_4436eb9629881fe7) }

var fileDescriptor_4436eb9629881fe7 = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0x69, 0x08, 0x74, 0x93, 0xb4, 0xb0, 0x7c, 0xc8, 0x72, 0xc1, 0x8d, 0x7a, 0x8a, 0x90,
	0xb0, 0xd5, 0xf6, 0xc4, 0x35, 0x48, 0xa0, 0xa2, 0x4a, 0xad, 0x4c, 0xe0, 0xc0, 0xc5, 0x5a, 0xb2,
	0xd3, 0xb0, 0x22, 0xf1, 0x9a, 0xdd, 0xb5, 0x71, 0xfe, 0x05, 0x3f, 0x83, 0x23, 0x3f, 0xa3, 0xc7,
	0x1e, 0x39, 0x21, 0x94, 0x1c, 0xe0, 0x67, 0x20, 0x8f, 0xd7, 0xfd, 0x30, 0xb9, 0x58, 0xab, 0x37,
	0xef, 0xbd, 0x79, 0x33, 0x1e, 0xf2, 0x64, 0xbe, 0x98, 0x7c, 0x62, 0x22, 0x09, 0x39, 0x14, 0x61,
	0xbe, 0x1f, 0x4e, 0x21, 0x01, 0x2d, 0x74, 0x90, 0x2a, 0x69, 0x24, 0xdd, 0xb2, 0xd5, 0x80, 0x43,
	0x11, 0xe4, 0xfb, 0xde, 0x7d, 0x36, 0x17, 0x89, 0x0c, 0xf1, 0x5b, 0x51, 0xbc, 0x87, 0x53, 0x39,
	0x95, 0xf8, 0x0c, 0xcb, 0x97, 0x45, 0x77, 0x1a, 0xb6, 0x29, 0x53, 0x6c, 0x6e, 0x5d, 0x3d, 0xaf,
	0x51, 0x34, 0x8b, 0x14, 0x6c, 0x6d, 0xef, 0x6f, 0x9b, 0xf4, 0x5e, 0x57, 0x19, 0xde, 0x1a, 0x66,
	0x80, 0xbe, 0x20, 0x9d, 0x4a, 0xec, 0x3a, 0x03, 0x67, 0xd8, 0x3d, 0x78, 0x1c, 0xdc, 0xcc, 0x14,
	0x9c, 0x62, 0x75, 0xb4, 0x79, 0xfe, 0x6b, 0xb7, 0xf5, 0xfd, 0xcf, 0x8f, 0x67, 0x4e, 0x64, 0x05,
	0x74, 0x8f, 0xf4, 0x13, 0x28, 0x4c, 0x2c, 0x15, 0x07, 0x15, 0x0b, 0xee, 0xde, 0x1a, 0x38, 0xc3,
	0x76, 0xd4, 0x2d, 0xc1, 0x93, 0x12, 0x3b, 0xe2, 0xf4, 0x15, 0xe9, 0x1b, 0xc5, 0xb8, 0x48, 0xa6,
	0x71, 0xca, 0x84, 0xd2, 0xee, 0xc6, 0x60, 0x63, 0xd8, 0x3d, 0xd8, 0x69, 0x76, 0x19, 0x57, 0xa4,
	0x53, 0x26, 0xd4, 0xa8, 0x5d, 0xb6, 0x8a, 0x7a, 0xe6, 0x0a, 0xd2, 0xf4, 0x90, 0x74, 0xb0, 0x8d,
	0x76, 0xdb, 0x68, 0xf0, 0xa8, 0x69, 0x80, 0x0d, 0xad, 0xd4, 0x52, 0xe9, 0x4b, 0xd2, 0xcb, 0x34,
	0xa8, 0x58, 0xc1, 0x57, 0xa6, 0xb8, 0x76, 0x6f, 0xa3, 0xd4, 0x6b, 0x4a, 0xdf, 0x69, 0x50, 0x11,
	0x52, 0xac, 0xbe, 0x9b, 0x5d, 0x22, 0x9a, 0x1e, 0x93, 0xed, 0x99, 0xf8, 0x92, 0x09, 0x2e, 0xcc,
	0x22, 0x36, 0xa2, 0x8c, 0xd0, 0x41, 0x9f, 0xa7, 0x4d, 0x9f, 0xe3, 0x9a, 0x36, 0x16, 0x97, 0x51,
	0xb6, 0x66, 0xd7, 0x41, 0x4d, 0xdf, 0x90, 0x7e, 0xb5, 0xae, 0x3a, 0xd3, 0x1d, 0xf4, 0xda, 0x5d,
	0x3b, 0x4e, 0x15, 0xe1, 0x28, 0x39, 0x93, 0xf5, 0x4e, 0xe4, 0x15, 0xac, 0xe9, 0x09, 0xb9, 0x97,
	0x2a, 0x31, 0x81, 0x58, 0xc1, 0x19, 0x28, 0x48, 0x26, 0xa0, 0xdd, 0xbb, 0x68, 0xe7, 0xff, 0xf7,
	0x13, 0x4b, 0x5e, 0x54, 0xd3, 0xac, 0xdb, 0x76, 0x7a, 0x03, 0xc5, 0x51, 0x73, 0x39, 0xcb, 0xe6,
	0x10, 0x1b, 0xc5, 0x26, 0x9f, 0xcb, 0x51, 0x37, 0xd7, 0x8f, 0xfa, 0x1e, 0x69, 0xe3, 0x8a, 0x55,
	0x8f, 0x9a, 0x5f, 0x07, 0xf5, 0xe8, 0xf9, 0xf9, 0xd2, 0x77, 0x2e, 0x96, 0xbe, 0xf3, 0x7b, 0xe9,
	0x3b, 0xdf, 0x56, 0x7e, 0xeb, 0x62, 0xe5, 0xb7, 0x7e, 0xae, 0xfc, 0xd6, 0x87, 0x07, 0xf5, 0x81,
	0x16, 0x78, 0xa2, 0x78, 0x9f, 0x1f, 0x3b, 0x78, 0xa0, 0x87, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xc6, 0xf4, 0xe9, 0xe1, 0x32, 0x03, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VolumeTrackers) > 0 {
		for iNdEx := len(m.VolumeTrackers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VolumeTrackers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.PriceReferences) > 0 {
		for iNdEx := len(m.PriceReferences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceReferences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.OrderRewards) > 0 {
		for iNdEx := len(m.OrderRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.LiquidityTiers) > 0 {
		for iNdEx := len(m.LiquidityTiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidityTiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.UserRewards) > 0 {
		for iNdEx := len(m.UserRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TradingPairs) > 0 {
		for iNdEx := len(m.TradingPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TradingPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.NextOrderId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextOrderId))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.NextOrderId != 0 {
		n += 1 + sovGenesis(uint64(m.NextOrderId))
	}
	if len(m.TradingPairs) > 0 {
		for _, e := range m.TradingPairs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UserRewards) > 0 {
		for _, e := range m.UserRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.LiquidityTiers) > 0 {
		for _, e := range m.LiquidityTiers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.OrderRewards) > 0 {
		for _, e := range m.OrderRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PriceReferences) > 0 {
		for _, e := range m.PriceReferences {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.VolumeTrackers) > 0 {
		for _, e := range m.VolumeTrackers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextOrderId", wireType)
			}
			m.NextOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingPairs = append(m.TradingPairs, TradingPair{})
			if err := m.TradingPairs[len(m.TradingPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, Order{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserRewards = append(m.UserRewards, UserReward{})
			if err := m.UserRewards[len(m.UserRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityTiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityTiers = append(m.LiquidityTiers, LiquidityTier{})
			if err := m.LiquidityTiers[len(m.LiquidityTiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderRewards = append(m.OrderRewards, OrderRewardInfo{})
			if err := m.OrderRewards[len(m.OrderRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceReferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceReferences = append(m.PriceReferences, PriceReference{})
			if err := m.PriceReferences[len(m.PriceReferences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeTrackers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolumeTrackers = append(m.VolumeTrackers, VolumeTracker{})
			if err := m.VolumeTrackers[len(m.VolumeTrackers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
