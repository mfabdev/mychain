// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mychain/dex/v1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryOrderBookRequest defines the QueryOrderBookRequest message.
type QueryOrderBookRequest struct {
	PairId uint64 `protobuf:"varint,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
}

func (m *QueryOrderBookRequest) Reset()         { *m = QueryOrderBookRequest{} }
func (m *QueryOrderBookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrderBookRequest) ProtoMessage()    {}
func (*QueryOrderBookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{2}
}
func (m *QueryOrderBookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderBookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderBookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderBookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderBookRequest.Merge(m, src)
}
func (m *QueryOrderBookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderBookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderBookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderBookRequest proto.InternalMessageInfo

func (m *QueryOrderBookRequest) GetPairId() uint64 {
	if m != nil {
		return m.PairId
	}
	return 0
}

// QueryOrderBookResponse defines the QueryOrderBookResponse message.
type QueryOrderBookResponse struct {
	BuyOrders  []Order `protobuf:"bytes,1,rep,name=buy_orders,json=buyOrders,proto3" json:"buy_orders"`
	SellOrders []Order `protobuf:"bytes,2,rep,name=sell_orders,json=sellOrders,proto3" json:"sell_orders"`
}

func (m *QueryOrderBookResponse) Reset()         { *m = QueryOrderBookResponse{} }
func (m *QueryOrderBookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrderBookResponse) ProtoMessage()    {}
func (*QueryOrderBookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{3}
}
func (m *QueryOrderBookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderBookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderBookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderBookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderBookResponse.Merge(m, src)
}
func (m *QueryOrderBookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderBookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderBookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderBookResponse proto.InternalMessageInfo

func (m *QueryOrderBookResponse) GetBuyOrders() []Order {
	if m != nil {
		return m.BuyOrders
	}
	return nil
}

func (m *QueryOrderBookResponse) GetSellOrders() []Order {
	if m != nil {
		return m.SellOrders
	}
	return nil
}

// QueryUserRewardsRequest defines the QueryUserRewardsRequest message.
type QueryUserRewardsRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryUserRewardsRequest) Reset()         { *m = QueryUserRewardsRequest{} }
func (m *QueryUserRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserRewardsRequest) ProtoMessage()    {}
func (*QueryUserRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{4}
}
func (m *QueryUserRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserRewardsRequest.Merge(m, src)
}
func (m *QueryUserRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserRewardsRequest proto.InternalMessageInfo

func (m *QueryUserRewardsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryUserRewardsResponse defines the QueryUserRewardsResponse message.
type QueryUserRewardsResponse struct {
	PendingLc types.Coin `protobuf:"bytes,1,opt,name=pending_lc,json=pendingLc,proto3" json:"pending_lc"`
	ClaimedLc types.Coin `protobuf:"bytes,2,opt,name=claimed_lc,json=claimedLc,proto3" json:"claimed_lc"`
}

func (m *QueryUserRewardsResponse) Reset()         { *m = QueryUserRewardsResponse{} }
func (m *QueryUserRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserRewardsResponse) ProtoMessage()    {}
func (*QueryUserRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{5}
}
func (m *QueryUserRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserRewardsResponse.Merge(m, src)
}
func (m *QueryUserRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserRewardsResponse proto.InternalMessageInfo

func (m *QueryUserRewardsResponse) GetPendingLc() types.Coin {
	if m != nil {
		return m.PendingLc
	}
	return types.Coin{}
}

func (m *QueryUserRewardsResponse) GetClaimedLc() types.Coin {
	if m != nil {
		return m.ClaimedLc
	}
	return types.Coin{}
}

// QueryOrderRewardsRequest defines the QueryOrderRewardsRequest message.
type QueryOrderRewardsRequest struct {
	Address  string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	OrderIds []uint64 `protobuf:"varint,2,rep,packed,name=order_ids,json=orderIds,proto3" json:"order_ids,omitempty"`
}

func (m *QueryOrderRewardsRequest) Reset()         { *m = QueryOrderRewardsRequest{} }
func (m *QueryOrderRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrderRewardsRequest) ProtoMessage()    {}
func (*QueryOrderRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{6}
}
func (m *QueryOrderRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderRewardsRequest.Merge(m, src)
}
func (m *QueryOrderRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderRewardsRequest proto.InternalMessageInfo

func (m *QueryOrderRewardsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryOrderRewardsRequest) GetOrderIds() []uint64 {
	if m != nil {
		return m.OrderIds
	}
	return nil
}

// QueryOrderRewardsResponse defines the QueryOrderRewardsResponse message.
type QueryOrderRewardsResponse struct {
	OrderRewards []OrderRewardInfo `protobuf:"bytes,1,rep,name=order_rewards,json=orderRewards,proto3" json:"order_rewards"`
	TotalPending types.Coin        `protobuf:"bytes,2,opt,name=total_pending,json=totalPending,proto3" json:"total_pending"`
}

func (m *QueryOrderRewardsResponse) Reset()         { *m = QueryOrderRewardsResponse{} }
func (m *QueryOrderRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrderRewardsResponse) ProtoMessage()    {}
func (*QueryOrderRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{7}
}
func (m *QueryOrderRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderRewardsResponse.Merge(m, src)
}
func (m *QueryOrderRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderRewardsResponse proto.InternalMessageInfo

func (m *QueryOrderRewardsResponse) GetOrderRewards() []OrderRewardInfo {
	if m != nil {
		return m.OrderRewards
	}
	return nil
}

func (m *QueryOrderRewardsResponse) GetTotalPending() types.Coin {
	if m != nil {
		return m.TotalPending
	}
	return types.Coin{}
}

// QueryTierInfoRequest defines the QueryTierInfoRequest message.
type QueryTierInfoRequest struct {
	PairId uint64 `protobuf:"varint,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
}

func (m *QueryTierInfoRequest) Reset()         { *m = QueryTierInfoRequest{} }
func (m *QueryTierInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTierInfoRequest) ProtoMessage()    {}
func (*QueryTierInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{8}
}
func (m *QueryTierInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTierInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTierInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTierInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTierInfoRequest.Merge(m, src)
}
func (m *QueryTierInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTierInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTierInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTierInfoRequest proto.InternalMessageInfo

func (m *QueryTierInfoRequest) GetPairId() uint64 {
	if m != nil {
		return m.PairId
	}
	return 0
}

// QueryTierInfoResponse defines the QueryTierInfoResponse message.
type QueryTierInfoResponse struct {
	CurrentTier    uint32                      `protobuf:"varint,1,opt,name=current_tier,json=currentTier,proto3" json:"current_tier,omitempty"`
	TierInfo       LiquidityTier               `protobuf:"bytes,2,opt,name=tier_info,json=tierInfo,proto3" json:"tier_info"`
	CurrentPrice   cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=current_price,json=currentPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"current_price"`
	ReferencePrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=reference_price,json=referencePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reference_price"`
}

func (m *QueryTierInfoResponse) Reset()         { *m = QueryTierInfoResponse{} }
func (m *QueryTierInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTierInfoResponse) ProtoMessage()    {}
func (*QueryTierInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{9}
}
func (m *QueryTierInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTierInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTierInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTierInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTierInfoResponse.Merge(m, src)
}
func (m *QueryTierInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTierInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTierInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTierInfoResponse proto.InternalMessageInfo

func (m *QueryTierInfoResponse) GetCurrentTier() uint32 {
	if m != nil {
		return m.CurrentTier
	}
	return 0
}

func (m *QueryTierInfoResponse) GetTierInfo() LiquidityTier {
	if m != nil {
		return m.TierInfo
	}
	return LiquidityTier{}
}

// QueryLCInfoRequest defines the QueryLCInfoRequest message.
type QueryLCInfoRequest struct {
}

func (m *QueryLCInfoRequest) Reset()         { *m = QueryLCInfoRequest{} }
func (m *QueryLCInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLCInfoRequest) ProtoMessage()    {}
func (*QueryLCInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{10}
}
func (m *QueryLCInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLCInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLCInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLCInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLCInfoRequest.Merge(m, src)
}
func (m *QueryLCInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLCInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLCInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLCInfoRequest proto.InternalMessageInfo

// QueryLCInfoResponse defines the QueryLCInfoResponse message.
type QueryLCInfoResponse struct {
	TotalSupply    types.Coin                  `protobuf:"bytes,1,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply"`
	ExchangeRate   cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=exchange_rate,json=exchangeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"exchange_rate"`
	BaseRewardRate cosmossdk_io_math.Int       `protobuf:"bytes,3,opt,name=base_reward_rate,json=baseRewardRate,proto3,customtype=cosmossdk.io/math.Int" json:"base_reward_rate"`
}

func (m *QueryLCInfoResponse) Reset()         { *m = QueryLCInfoResponse{} }
func (m *QueryLCInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLCInfoResponse) ProtoMessage()    {}
func (*QueryLCInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{11}
}
func (m *QueryLCInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLCInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLCInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLCInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLCInfoResponse.Merge(m, src)
}
func (m *QueryLCInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLCInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLCInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLCInfoResponse proto.InternalMessageInfo

func (m *QueryLCInfoResponse) GetTotalSupply() types.Coin {
	if m != nil {
		return m.TotalSupply
	}
	return types.Coin{}
}

// QueryDynamicRewardStateRequest defines the QueryDynamicRewardStateRequest message.
type QueryDynamicRewardStateRequest struct {
}

func (m *QueryDynamicRewardStateRequest) Reset()         { *m = QueryDynamicRewardStateRequest{} }
func (m *QueryDynamicRewardStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDynamicRewardStateRequest) ProtoMessage()    {}
func (*QueryDynamicRewardStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{12}
}
func (m *QueryDynamicRewardStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDynamicRewardStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDynamicRewardStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDynamicRewardStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDynamicRewardStateRequest.Merge(m, src)
}
func (m *QueryDynamicRewardStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDynamicRewardStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDynamicRewardStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDynamicRewardStateRequest proto.InternalMessageInfo

// QueryDynamicRewardStateResponse defines the QueryDynamicRewardStateResponse message.
type QueryDynamicRewardStateResponse struct {
	State            DynamicRewardState          `protobuf:"bytes,1,opt,name=state,proto3" json:"state"`
	CurrentLiquidity cosmossdk_io_math.Int       `protobuf:"bytes,2,opt,name=current_liquidity,json=currentLiquidity,proto3,customtype=cosmossdk.io/math.Int" json:"current_liquidity"`
	LiquidityTarget  cosmossdk_io_math.Int       `protobuf:"bytes,3,opt,name=liquidity_target,json=liquidityTarget,proto3,customtype=cosmossdk.io/math.Int" json:"liquidity_target"`
	PriceRatio       cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=price_ratio,json=priceRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price_ratio"`
}

func (m *QueryDynamicRewardStateResponse) Reset()         { *m = QueryDynamicRewardStateResponse{} }
func (m *QueryDynamicRewardStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDynamicRewardStateResponse) ProtoMessage()    {}
func (*QueryDynamicRewardStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{13}
}
func (m *QueryDynamicRewardStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDynamicRewardStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDynamicRewardStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDynamicRewardStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDynamicRewardStateResponse.Merge(m, src)
}
func (m *QueryDynamicRewardStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDynamicRewardStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDynamicRewardStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDynamicRewardStateResponse proto.InternalMessageInfo

func (m *QueryDynamicRewardStateResponse) GetState() DynamicRewardState {
	if m != nil {
		return m.State
	}
	return DynamicRewardState{}
}

// QueryLiquidityBalanceRequest defines the QueryLiquidityBalanceRequest message.
type QueryLiquidityBalanceRequest struct {
	// Optional: filter by specific trading pair
	PairId uint64 `protobuf:"varint,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
}

func (m *QueryLiquidityBalanceRequest) Reset()         { *m = QueryLiquidityBalanceRequest{} }
func (m *QueryLiquidityBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityBalanceRequest) ProtoMessage()    {}
func (*QueryLiquidityBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{14}
}
func (m *QueryLiquidityBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityBalanceRequest.Merge(m, src)
}
func (m *QueryLiquidityBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityBalanceRequest proto.InternalMessageInfo

func (m *QueryLiquidityBalanceRequest) GetPairId() uint64 {
	if m != nil {
		return m.PairId
	}
	return 0
}

// QueryLiquidityBalanceResponse defines the QueryLiquidityBalanceResponse message.
type QueryLiquidityBalanceResponse struct {
	BuyLiquidity   cosmossdk_io_math.Int       `protobuf:"bytes,1,opt,name=buy_liquidity,json=buyLiquidity,proto3,customtype=cosmossdk.io/math.Int" json:"buy_liquidity"`
	SellLiquidity  cosmossdk_io_math.Int       `protobuf:"bytes,2,opt,name=sell_liquidity,json=sellLiquidity,proto3,customtype=cosmossdk.io/math.Int" json:"sell_liquidity"`
	TotalLiquidity cosmossdk_io_math.Int       `protobuf:"bytes,3,opt,name=total_liquidity,json=totalLiquidity,proto3,customtype=cosmossdk.io/math.Int" json:"total_liquidity"`
	BuyOrderCount  uint64                      `protobuf:"varint,4,opt,name=buy_order_count,json=buyOrderCount,proto3" json:"buy_order_count,omitempty"`
	SellOrderCount uint64                      `protobuf:"varint,5,opt,name=sell_order_count,json=sellOrderCount,proto3" json:"sell_order_count,omitempty"`
	BuyRatio       cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=buy_ratio,json=buyRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"buy_ratio"`
	SellRatio      cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=sell_ratio,json=sellRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"sell_ratio"`
	BalanceRatio   cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=balance_ratio,json=balanceRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"balance_ratio"`
	BuyMultiplier  cosmossdk_io_math.LegacyDec `protobuf:"bytes,9,opt,name=buy_multiplier,json=buyMultiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"buy_multiplier"`
	SellMultiplier cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,opt,name=sell_multiplier,json=sellMultiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"sell_multiplier"`
	CurrentApr     cosmossdk_io_math.LegacyDec `protobuf:"bytes,11,opt,name=current_apr,json=currentApr,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"current_apr"`
}

func (m *QueryLiquidityBalanceResponse) Reset()         { *m = QueryLiquidityBalanceResponse{} }
func (m *QueryLiquidityBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityBalanceResponse) ProtoMessage()    {}
func (*QueryLiquidityBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{15}
}
func (m *QueryLiquidityBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityBalanceResponse.Merge(m, src)
}
func (m *QueryLiquidityBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityBalanceResponse proto.InternalMessageInfo

func (m *QueryLiquidityBalanceResponse) GetBuyOrderCount() uint64 {
	if m != nil {
		return m.BuyOrderCount
	}
	return 0
}

func (m *QueryLiquidityBalanceResponse) GetSellOrderCount() uint64 {
	if m != nil {
		return m.SellOrderCount
	}
	return 0
}

// QueryEstimateFeesRequest defines the QueryEstimateFeesRequest message.
type QueryEstimateFeesRequest struct {
	PairId      uint64                `protobuf:"varint,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	IsBuyOrder  bool                  `protobuf:"varint,2,opt,name=is_buy_order,json=isBuyOrder,proto3" json:"is_buy_order,omitempty"`
	OrderAmount cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=order_amount,json=orderAmount,proto3,customtype=cosmossdk.io/math.Int" json:"order_amount"`
	OrderPrice  cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=order_price,json=orderPrice,proto3,customtype=cosmossdk.io/math.Int" json:"order_price"`
}

func (m *QueryEstimateFeesRequest) Reset()         { *m = QueryEstimateFeesRequest{} }
func (m *QueryEstimateFeesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateFeesRequest) ProtoMessage()    {}
func (*QueryEstimateFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{16}
}
func (m *QueryEstimateFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateFeesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateFeesRequest.Merge(m, src)
}
func (m *QueryEstimateFeesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateFeesRequest proto.InternalMessageInfo

func (m *QueryEstimateFeesRequest) GetPairId() uint64 {
	if m != nil {
		return m.PairId
	}
	return 0
}

func (m *QueryEstimateFeesRequest) GetIsBuyOrder() bool {
	if m != nil {
		return m.IsBuyOrder
	}
	return false
}

// QueryEstimateFeesResponse defines the QueryEstimateFeesResponse message.
type QueryEstimateFeesResponse struct {
	Estimate         FeeEstimate                 `protobuf:"bytes,1,opt,name=estimate,proto3" json:"estimate"`
	MakerFeeRate     cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=maker_fee_rate,json=makerFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"maker_fee_rate"`
	TakerFeeRate     cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=taker_fee_rate,json=takerFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"taker_fee_rate"`
	EffectiveFeeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=effective_fee_rate,json=effectiveFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"effective_fee_rate"`
}

func (m *QueryEstimateFeesResponse) Reset()         { *m = QueryEstimateFeesResponse{} }
func (m *QueryEstimateFeesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateFeesResponse) ProtoMessage()    {}
func (*QueryEstimateFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{17}
}
func (m *QueryEstimateFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateFeesResponse.Merge(m, src)
}
func (m *QueryEstimateFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateFeesResponse proto.InternalMessageInfo

func (m *QueryEstimateFeesResponse) GetEstimate() FeeEstimate {
	if m != nil {
		return m.Estimate
	}
	return FeeEstimate{}
}

// QueryFeeStatisticsRequest defines the QueryFeeStatisticsRequest message.
type QueryFeeStatisticsRequest struct {
}

func (m *QueryFeeStatisticsRequest) Reset()         { *m = QueryFeeStatisticsRequest{} }
func (m *QueryFeeStatisticsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeStatisticsRequest) ProtoMessage()    {}
func (*QueryFeeStatisticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{18}
}
func (m *QueryFeeStatisticsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeStatisticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeStatisticsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeStatisticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeStatisticsRequest.Merge(m, src)
}
func (m *QueryFeeStatisticsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeStatisticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeStatisticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeStatisticsRequest proto.InternalMessageInfo

// QueryFeeStatisticsResponse defines the QueryFeeStatisticsResponse message.
type QueryFeeStatisticsResponse struct {
	TotalFeesCollected cosmossdk_io_math.Int       `protobuf:"bytes,1,opt,name=total_fees_collected,json=totalFeesCollected,proto3,customtype=cosmossdk.io/math.Int" json:"total_fees_collected"`
	TotalFeesBurned    cosmossdk_io_math.Int       `protobuf:"bytes,2,opt,name=total_fees_burned,json=totalFeesBurned,proto3,customtype=cosmossdk.io/math.Int" json:"total_fees_burned"`
	FeeByType          []FeeTypeStatistics         `protobuf:"bytes,3,rep,name=fee_by_type,json=feeByType,proto3" json:"fee_by_type"`
	CurrentPriceRatio  cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=current_price_ratio,json=currentPriceRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"current_price_ratio"`
	DynamicFeesActive  bool                        `protobuf:"varint,5,opt,name=dynamic_fees_active,json=dynamicFeesActive,proto3" json:"dynamic_fees_active,omitempty"`
}

func (m *QueryFeeStatisticsResponse) Reset()         { *m = QueryFeeStatisticsResponse{} }
func (m *QueryFeeStatisticsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeStatisticsResponse) ProtoMessage()    {}
func (*QueryFeeStatisticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{19}
}
func (m *QueryFeeStatisticsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeStatisticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeStatisticsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeStatisticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeStatisticsResponse.Merge(m, src)
}
func (m *QueryFeeStatisticsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeStatisticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeStatisticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeStatisticsResponse proto.InternalMessageInfo

func (m *QueryFeeStatisticsResponse) GetFeeByType() []FeeTypeStatistics {
	if m != nil {
		return m.FeeByType
	}
	return nil
}

func (m *QueryFeeStatisticsResponse) GetDynamicFeesActive() bool {
	if m != nil {
		return m.DynamicFeesActive
	}
	return false
}

// FeeTypeStatistics tracks stats for each fee type
type FeeTypeStatistics struct {
	FeeType        string                      `protobuf:"bytes,1,opt,name=fee_type,json=feeType,proto3" json:"fee_type,omitempty"`
	TotalCollected cosmossdk_io_math.Int       `protobuf:"bytes,2,opt,name=total_collected,json=totalCollected,proto3,customtype=cosmossdk.io/math.Int" json:"total_collected"`
	CurrentRate    cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=current_rate,json=currentRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"current_rate"`
}

func (m *FeeTypeStatistics) Reset()         { *m = FeeTypeStatistics{} }
func (m *FeeTypeStatistics) String() string { return proto.CompactTextString(m) }
func (*FeeTypeStatistics) ProtoMessage()    {}
func (*FeeTypeStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{20}
}
func (m *FeeTypeStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeTypeStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeTypeStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeTypeStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeTypeStatistics.Merge(m, src)
}
func (m *FeeTypeStatistics) XXX_Size() int {
	return m.Size()
}
func (m *FeeTypeStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeTypeStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_FeeTypeStatistics proto.InternalMessageInfo

func (m *FeeTypeStatistics) GetFeeType() string {
	if m != nil {
		return m.FeeType
	}
	return ""
}

// QueryEstimateOrderRewardsRequest is request for EstimateOrderRewards
type QueryEstimateOrderRewardsRequest struct {
	PairId uint64 `protobuf:"varint,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	Price  string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	IsBuy  bool   `protobuf:"varint,4,opt,name=is_buy,json=isBuy,proto3" json:"is_buy,omitempty"`
}

func (m *QueryEstimateOrderRewardsRequest) Reset()         { *m = QueryEstimateOrderRewardsRequest{} }
func (m *QueryEstimateOrderRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateOrderRewardsRequest) ProtoMessage()    {}
func (*QueryEstimateOrderRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{21}
}
func (m *QueryEstimateOrderRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateOrderRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateOrderRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateOrderRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateOrderRewardsRequest.Merge(m, src)
}
func (m *QueryEstimateOrderRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateOrderRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateOrderRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateOrderRewardsRequest proto.InternalMessageInfo

func (m *QueryEstimateOrderRewardsRequest) GetPairId() uint64 {
	if m != nil {
		return m.PairId
	}
	return 0
}

func (m *QueryEstimateOrderRewardsRequest) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *QueryEstimateOrderRewardsRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *QueryEstimateOrderRewardsRequest) GetIsBuy() bool {
	if m != nil {
		return m.IsBuy
	}
	return false
}

// QueryEstimateOrderRewardsResponse is response for EstimateOrderRewards
type QueryEstimateOrderRewardsResponse struct {
	CurrentSpread         string `protobuf:"bytes,1,opt,name=current_spread,json=currentSpread,proto3" json:"current_spread,omitempty"`
	NewSpread             string `protobuf:"bytes,2,opt,name=new_spread,json=newSpread,proto3" json:"new_spread,omitempty"`
	SpreadImprovement     string `protobuf:"bytes,3,opt,name=spread_improvement,json=spreadImprovement,proto3" json:"spread_improvement,omitempty"`
	BaseApy               string `protobuf:"bytes,4,opt,name=base_apy,json=baseApy,proto3" json:"base_apy,omitempty"`
	SpreadMultiplier      string `protobuf:"bytes,5,opt,name=spread_multiplier,json=spreadMultiplier,proto3" json:"spread_multiplier,omitempty"`
	EffectiveApy          string `protobuf:"bytes,6,opt,name=effective_apy,json=effectiveApy,proto3" json:"effective_apy,omitempty"`
	EstimatedDailyRewards string `protobuf:"bytes,7,opt,name=estimated_daily_rewards,json=estimatedDailyRewards,proto3" json:"estimated_daily_rewards,omitempty"`
	RewardTier            string `protobuf:"bytes,8,opt,name=reward_tier,json=rewardTier,proto3" json:"reward_tier,omitempty"`
	CurrentBestBid        string `protobuf:"bytes,9,opt,name=current_best_bid,json=currentBestBid,proto3" json:"current_best_bid,omitempty"`
	CurrentBestAsk        string `protobuf:"bytes,10,opt,name=current_best_ask,json=currentBestAsk,proto3" json:"current_best_ask,omitempty"`
}

func (m *QueryEstimateOrderRewardsResponse) Reset()         { *m = QueryEstimateOrderRewardsResponse{} }
func (m *QueryEstimateOrderRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateOrderRewardsResponse) ProtoMessage()    {}
func (*QueryEstimateOrderRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f191be82aa2adc, []int{22}
}
func (m *QueryEstimateOrderRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateOrderRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateOrderRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateOrderRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateOrderRewardsResponse.Merge(m, src)
}
func (m *QueryEstimateOrderRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateOrderRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateOrderRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateOrderRewardsResponse proto.InternalMessageInfo

func (m *QueryEstimateOrderRewardsResponse) GetCurrentSpread() string {
	if m != nil {
		return m.CurrentSpread
	}
	return ""
}

func (m *QueryEstimateOrderRewardsResponse) GetNewSpread() string {
	if m != nil {
		return m.NewSpread
	}
	return ""
}

func (m *QueryEstimateOrderRewardsResponse) GetSpreadImprovement() string {
	if m != nil {
		return m.SpreadImprovement
	}
	return ""
}

func (m *QueryEstimateOrderRewardsResponse) GetBaseApy() string {
	if m != nil {
		return m.BaseApy
	}
	return ""
}

func (m *QueryEstimateOrderRewardsResponse) GetSpreadMultiplier() string {
	if m != nil {
		return m.SpreadMultiplier
	}
	return ""
}

func (m *QueryEstimateOrderRewardsResponse) GetEffectiveApy() string {
	if m != nil {
		return m.EffectiveApy
	}
	return ""
}

func (m *QueryEstimateOrderRewardsResponse) GetEstimatedDailyRewards() string {
	if m != nil {
		return m.EstimatedDailyRewards
	}
	return ""
}

func (m *QueryEstimateOrderRewardsResponse) GetRewardTier() string {
	if m != nil {
		return m.RewardTier
	}
	return ""
}

func (m *QueryEstimateOrderRewardsResponse) GetCurrentBestBid() string {
	if m != nil {
		return m.CurrentBestBid
	}
	return ""
}

func (m *QueryEstimateOrderRewardsResponse) GetCurrentBestAsk() string {
	if m != nil {
		return m.CurrentBestAsk
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "mychain.dex.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "mychain.dex.v1.QueryParamsResponse")
	proto.RegisterType((*QueryOrderBookRequest)(nil), "mychain.dex.v1.QueryOrderBookRequest")
	proto.RegisterType((*QueryOrderBookResponse)(nil), "mychain.dex.v1.QueryOrderBookResponse")
	proto.RegisterType((*QueryUserRewardsRequest)(nil), "mychain.dex.v1.QueryUserRewardsRequest")
	proto.RegisterType((*QueryUserRewardsResponse)(nil), "mychain.dex.v1.QueryUserRewardsResponse")
	proto.RegisterType((*QueryOrderRewardsRequest)(nil), "mychain.dex.v1.QueryOrderRewardsRequest")
	proto.RegisterType((*QueryOrderRewardsResponse)(nil), "mychain.dex.v1.QueryOrderRewardsResponse")
	proto.RegisterType((*QueryTierInfoRequest)(nil), "mychain.dex.v1.QueryTierInfoRequest")
	proto.RegisterType((*QueryTierInfoResponse)(nil), "mychain.dex.v1.QueryTierInfoResponse")
	proto.RegisterType((*QueryLCInfoRequest)(nil), "mychain.dex.v1.QueryLCInfoRequest")
	proto.RegisterType((*QueryLCInfoResponse)(nil), "mychain.dex.v1.QueryLCInfoResponse")
	proto.RegisterType((*QueryDynamicRewardStateRequest)(nil), "mychain.dex.v1.QueryDynamicRewardStateRequest")
	proto.RegisterType((*QueryDynamicRewardStateResponse)(nil), "mychain.dex.v1.QueryDynamicRewardStateResponse")
	proto.RegisterType((*QueryLiquidityBalanceRequest)(nil), "mychain.dex.v1.QueryLiquidityBalanceRequest")
	proto.RegisterType((*QueryLiquidityBalanceResponse)(nil), "mychain.dex.v1.QueryLiquidityBalanceResponse")
	proto.RegisterType((*QueryEstimateFeesRequest)(nil), "mychain.dex.v1.QueryEstimateFeesRequest")
	proto.RegisterType((*QueryEstimateFeesResponse)(nil), "mychain.dex.v1.QueryEstimateFeesResponse")
	proto.RegisterType((*QueryFeeStatisticsRequest)(nil), "mychain.dex.v1.QueryFeeStatisticsRequest")
	proto.RegisterType((*QueryFeeStatisticsResponse)(nil), "mychain.dex.v1.QueryFeeStatisticsResponse")
	proto.RegisterType((*FeeTypeStatistics)(nil), "mychain.dex.v1.FeeTypeStatistics")
	proto.RegisterType((*QueryEstimateOrderRewardsRequest)(nil), "mychain.dex.v1.QueryEstimateOrderRewardsRequest")
	proto.RegisterType((*QueryEstimateOrderRewardsResponse)(nil), "mychain.dex.v1.QueryEstimateOrderRewardsResponse")
}

func init() { proto.RegisterFile("mychain/dex/v1/query.proto", fileDescriptor_48f191be82aa2adc) }

var fileDescriptor_48f191be82aa2adc = []byte{
	// 1933 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0xf7, 0xea, 0xcb, 0xe4, 0xa3, 0x48, 0x49, 0x63, 0xc9, 0x96, 0xa9, 0x98, 0x92, 0x57, 0xb1,
	0x22, 0x3b, 0x31, 0x19, 0x39, 0x40, 0x8b, 0x16, 0x6d, 0x60, 0xd1, 0xaa, 0x62, 0x19, 0x2a, 0x62,
	0xaf, 0xdd, 0x4b, 0x2f, 0x8b, 0xe1, 0xee, 0x90, 0x1e, 0x88, 0xdc, 0x5d, 0xef, 0x2e, 0x65, 0x11,
	0x41, 0x80, 0xa2, 0x28, 0x8a, 0x9e, 0x8a, 0xa0, 0xcd, 0x29, 0xd7, 0x5e, 0x0a, 0x14, 0x05, 0x8a,
	0xde, 0xdb, 0x4b, 0x2e, 0x39, 0x06, 0xe8, 0xa1, 0x45, 0x0f, 0x41, 0x61, 0x17, 0xe8, 0xa5, 0xb7,
	0xfe, 0x03, 0xc5, 0xbc, 0x99, 0x59, 0x7e, 0x2d, 0xcd, 0x65, 0x2e, 0x82, 0x38, 0xf3, 0x7e, 0xbf,
	0x79, 0xef, 0xcd, 0xdb, 0xf7, 0x31, 0x50, 0xee, 0xf4, 0x9c, 0xe7, 0x94, 0x7b, 0x35, 0x97, 0x5d,
	0xd4, 0xce, 0x0f, 0x6a, 0x2f, 0xba, 0x2c, 0xec, 0x55, 0x83, 0xd0, 0x8f, 0x7d, 0x52, 0x52, 0x7b,
	0x55, 0x97, 0x5d, 0x54, 0xcf, 0x0f, 0xca, 0x6b, 0xb4, 0xc3, 0x3d, 0xbf, 0x86, 0x7f, 0xa5, 0x48,
	0xf9, 0x8e, 0xe3, 0x47, 0x1d, 0x3f, 0xaa, 0x35, 0x68, 0xc4, 0x24, 0xb6, 0x76, 0x7e, 0xd0, 0x60,
	0x31, 0x3d, 0xa8, 0x05, 0xb4, 0xc5, 0x3d, 0x1a, 0x73, 0xdf, 0x53, 0xb2, 0x95, 0x41, 0x59, 0x2d,
	0xe5, 0xf8, 0x5c, 0xef, 0xaf, 0xb7, 0xfc, 0x96, 0x8f, 0xff, 0xd6, 0xc4, 0x7f, 0x6a, 0xf5, 0xad,
	0x96, 0xef, 0xb7, 0xda, 0xac, 0x46, 0x03, 0x5e, 0xa3, 0x9e, 0xe7, 0xc7, 0x48, 0x19, 0xa9, 0xdd,
	0xad, 0x11, 0xf5, 0x03, 0x1a, 0xd2, 0x8e, 0xde, 0x1c, 0xb5, 0x2d, 0xee, 0x05, 0x4c, 0xed, 0x99,
	0xeb, 0x40, 0x9e, 0x08, 0x75, 0x1f, 0x23, 0xc0, 0x62, 0x2f, 0xba, 0x2c, 0x8a, 0xcd, 0xc7, 0x70,
	0x65, 0x68, 0x35, 0x0a, 0x7c, 0x2f, 0x62, 0xe4, 0x7b, 0xb0, 0x24, 0x89, 0x37, 0x8d, 0x1d, 0x63,
	0xbf, 0x70, 0xef, 0x6a, 0x75, 0xd8, 0x33, 0x55, 0x29, 0x5f, 0xcf, 0x7f, 0xf5, 0xcd, 0xf6, 0xa5,
	0xdf, 0xff, 0xe7, 0x4f, 0x77, 0x0c, 0x4b, 0x01, 0xcc, 0xf7, 0x61, 0x03, 0x19, 0x3f, 0x0e, 0x5d,
	0x16, 0xd6, 0x7d, 0xff, 0x4c, 0x1d, 0x45, 0xae, 0xc1, 0xe5, 0x80, 0xf2, 0xd0, 0xe6, 0x2e, 0x92,
	0x2e, 0x08, 0x04, 0x0f, 0x4f, 0x5c, 0xf3, 0x37, 0x06, 0x5c, 0x1d, 0x85, 0x28, 0x3d, 0xbe, 0x0f,
	0xd0, 0xe8, 0xf6, 0x6c, 0x5f, 0x6c, 0x08, 0x5d, 0xe6, 0xf7, 0x0b, 0xf7, 0x36, 0x46, 0x75, 0x91,
	0xb0, 0x05, 0xa1, 0x8a, 0x95, 0x6f, 0x74, 0x25, 0x4d, 0x44, 0x7e, 0x00, 0x85, 0x88, 0xb5, 0xdb,
	0x1a, 0x3c, 0x37, 0x1d, 0x0c, 0x42, 0x5e, 0xa2, 0xcd, 0x0f, 0xe0, 0x1a, 0xea, 0xf4, 0x93, 0x88,
	0x85, 0x16, 0x7b, 0x49, 0x43, 0x57, 0xfb, 0x8c, 0x6c, 0xc2, 0x65, 0xea, 0xba, 0x21, 0x8b, 0xa4,
	0x77, 0xf2, 0x96, 0xfe, 0x69, 0x7e, 0x61, 0xc0, 0xe6, 0x38, 0x4a, 0xd9, 0xf2, 0x21, 0x40, 0xc0,
	0x3c, 0x97, 0x7b, 0x2d, 0xbb, 0xed, 0x28, 0xbf, 0x5e, 0xaf, 0xca, 0x10, 0xa9, 0x8a, 0x10, 0xa9,
	0xaa, 0x10, 0xa9, 0x3e, 0xf0, 0xb9, 0xa7, 0xed, 0x51, 0x90, 0x53, 0x47, 0xe0, 0x9d, 0x36, 0xe5,
	0x1d, 0xe6, 0x0a, 0xfc, 0x5c, 0x46, 0xbc, 0x82, 0x9c, 0x3a, 0xe6, 0x13, 0xa5, 0x1b, 0x1a, 0x98,
	0xd5, 0x24, 0xb2, 0x05, 0x79, 0x74, 0xa0, 0xcd, 0x5d, 0xe9, 0xc3, 0x05, 0x2b, 0x87, 0x0b, 0x27,
	0x6e, 0x64, 0xfe, 0xd1, 0x80, 0xeb, 0x29, 0x9c, 0xca, 0xe0, 0x47, 0x50, 0x94, 0xd0, 0x50, 0x6e,
	0xa8, 0xfb, 0xdb, 0x4e, 0xbd, 0x02, 0x09, 0x3e, 0xf1, 0x9a, 0xbe, 0xd2, 0x7c, 0xd9, 0x1f, 0xe0,
	0x24, 0x47, 0x50, 0x8c, 0xfd, 0x98, 0xb6, 0x6d, 0xe5, 0x8f, 0xac, 0xf6, 0x2f, 0x23, 0xea, 0xb1,
	0x04, 0x99, 0x35, 0x58, 0x47, 0x75, 0x9f, 0x71, 0x16, 0x8a, 0xa3, 0xa6, 0x86, 0xe6, 0xe7, 0x73,
	0x2a, 0x9a, 0xfb, 0x08, 0x65, 0xdc, 0x4d, 0x58, 0x76, 0xba, 0x61, 0xc8, 0xbc, 0xd8, 0x8e, 0x39,
	0x0b, 0x11, 0x57, 0xb4, 0x0a, 0x6a, 0x4d, 0x88, 0x93, 0xfb, 0x90, 0x17, 0x5b, 0x36, 0xf7, 0x9a,
	0xbe, 0xd2, 0xf7, 0xc6, 0xa8, 0xed, 0xa7, 0xfc, 0x45, 0x97, 0xbb, 0x3c, 0xc6, 0x03, 0x94, 0xce,
	0xb9, 0x58, 0x1d, 0x46, 0x1e, 0x42, 0x51, 0x1f, 0x12, 0x84, 0xdc, 0x61, 0x9b, 0xf3, 0xe2, 0x72,
	0xea, 0xbb, 0x42, 0xec, 0x9f, 0xdf, 0x6c, 0x6f, 0x49, 0xe3, 0x23, 0xf7, 0xac, 0xca, 0xfd, 0x5a,
	0x87, 0xc6, 0xcf, 0xab, 0xa7, 0xac, 0x45, 0x9d, 0xde, 0x11, 0x73, 0x2c, 0xad, 0xde, 0x63, 0x01,
	0x24, 0xa7, 0xb0, 0x12, 0xb2, 0x26, 0x0b, 0x99, 0xe7, 0x30, 0xc5, 0xb5, 0x90, 0x9d, 0xab, 0x94,
	0x60, 0x91, 0x2d, 0xc9, 0x25, 0xa7, 0x0f, 0x06, 0xbc, 0x68, 0xfe, 0xd7, 0x50, 0xc9, 0x44, 0x2f,
	0x2b, 0x57, 0xd5, 0x41, 0xde, 0x82, 0x1d, 0x75, 0x83, 0xa0, 0xdd, 0xcb, 0x1a, 0xfa, 0x05, 0x04,
	0x3d, 0x45, 0x8c, 0xf0, 0x04, 0xbb, 0x70, 0x9e, 0x53, 0xaf, 0xc5, 0xec, 0x90, 0xc6, 0x0c, 0xfd,
	0x99, 0xd5, 0x13, 0x1a, 0x69, 0xd1, 0x98, 0x91, 0x8f, 0x60, 0x55, 0x9c, 0xa8, 0x82, 0x52, 0x92,
	0x49, 0xb7, 0xde, 0x50, 0x64, 0x1b, 0xe3, 0x64, 0x27, 0x5e, 0x6c, 0x95, 0x04, 0x4c, 0xc6, 0xa3,
	0x20, 0x32, 0x77, 0xa0, 0x82, 0xd6, 0x1e, 0xf5, 0x3c, 0xda, 0xe1, 0x8e, 0xdc, 0x79, 0x1a, 0xd3,
	0x98, 0x69, 0x87, 0xfc, 0x65, 0x0e, 0xb6, 0x27, 0x8a, 0x24, 0x59, 0x61, 0x31, 0x12, 0x0b, 0xca,
	0x2b, 0xe6, 0x68, 0x80, 0x8c, 0x43, 0x95, 0x7b, 0x24, 0x8c, 0x3c, 0x82, 0x35, 0x1d, 0x22, 0x6d,
	0x1d, 0x4b, 0xca, 0x39, 0x53, 0xec, 0x59, 0x55, 0xb8, 0x24, 0x04, 0xc9, 0x43, 0x58, 0x4d, 0x38,
	0xec, 0x98, 0x86, 0x2d, 0x16, 0x67, 0x73, 0xcd, 0x4a, 0x02, 0x7b, 0x86, 0x28, 0x72, 0x04, 0x05,
	0x0c, 0x32, 0xe1, 0x5e, 0xee, 0xcf, 0x12, 0x6a, 0x80, 0x38, 0x4b, 0xc0, 0xcc, 0xef, 0xc2, 0x5b,
	0x32, 0x9e, 0x34, 0x7b, 0x9d, 0xb6, 0xa9, 0xe7, 0xb0, 0xa9, 0x9f, 0xed, 0xff, 0x16, 0xe1, 0xc6,
	0x04, 0x64, 0x12, 0x93, 0x45, 0x51, 0x58, 0xfa, 0x2e, 0x33, 0xb2, 0xd8, 0xb9, 0xdc, 0xe8, 0xf6,
	0x29, 0xc9, 0x11, 0x94, 0xb0, 0xc0, 0xcc, 0xe8, 0xf7, 0xa2, 0x00, 0xf5, 0x59, 0x8e, 0x61, 0x45,
	0x7e, 0x1d, 0x7d, 0x9a, 0x6c, 0xe1, 0x88, 0xa8, 0x3e, 0xcf, 0x1e, 0xac, 0x24, 0xa5, 0xd2, 0x76,
	0xfc, 0xae, 0x17, 0xa3, 0xdb, 0x17, 0xac, 0xa2, 0x2e, 0x89, 0x0f, 0xc4, 0x22, 0xd9, 0x87, 0xd5,
	0x7e, 0x59, 0x54, 0x82, 0x8b, 0x28, 0x58, 0x4a, 0xca, 0x9f, 0x94, 0xbc, 0x0f, 0xa2, 0x9a, 0xaa,
	0x2b, 0x5c, 0xca, 0x7e, 0x85, 0xb9, 0x46, 0xb7, 0x87, 0x17, 0x48, 0xea, 0x80, 0x25, 0x55, 0x51,
	0x5c, 0xce, 0x4e, 0x91, 0x17, 0x30, 0xc9, 0xf1, 0x10, 0x8a, 0x0d, 0x79, 0x79, 0x8a, 0x26, 0x37,
	0xc3, 0x97, 0xaf, 0x90, 0x92, 0xe9, 0x11, 0x94, 0x84, 0x3d, 0x9d, 0x6e, 0x3b, 0xe6, 0x41, 0x5b,
	0x24, 0xed, 0x7c, 0x76, 0x2a, 0xe1, 0xc5, 0x1f, 0x27, 0x48, 0x91, 0x4f, 0xd1, 0xb2, 0x01, 0x32,
	0x98, 0x21, 0x9f, 0x0a, 0xec, 0x00, 0xdb, 0x11, 0xe8, 0xc2, 0x61, 0xd3, 0x20, 0xdc, 0x2c, 0xcc,
	0xf0, 0xb9, 0x28, 0xdc, 0x61, 0x10, 0x9a, 0x7f, 0xd7, 0xdd, 0xc7, 0x8f, 0xa2, 0x98, 0x77, 0x68,
	0xcc, 0x8e, 0x19, 0x8b, 0xa6, 0x7d, 0x2b, 0x64, 0x07, 0x96, 0x79, 0x64, 0x27, 0xa1, 0x83, 0x31,
	0x9c, 0xb3, 0x80, 0x47, 0x75, 0x15, 0x36, 0xe4, 0x3e, 0xc8, 0x5a, 0x6c, 0xd3, 0x0e, 0x46, 0x4b,
	0xa6, 0xf0, 0x2c, 0x20, 0xe4, 0x10, 0x11, 0xe4, 0x43, 0x90, 0x3f, 0x87, 0x2a, 0xcf, 0x14, 0x02,
	0x40, 0x84, 0xac, 0x37, 0x5f, 0xce, 0xa9, 0x3e, 0x63, 0xd8, 0x32, 0xf5, 0x2d, 0xff, 0x10, 0x72,
	0x4c, 0xad, 0xab, 0x2c, 0xba, 0x35, 0x9a, 0x45, 0x8f, 0x19, 0xd3, 0x50, 0x5d, 0x64, 0x35, 0x84,
	0x9c, 0x40, 0xa9, 0x43, 0xcf, 0x58, 0x68, 0x37, 0xd9, 0xb7, 0xa8, 0x2d, 0x08, 0x3d, 0x66, 0xb2,
	0xb6, 0x9c, 0x40, 0x29, 0x1e, 0xa6, 0x9a, 0xa5, 0x60, 0xc7, 0x83, 0x54, 0x4f, 0x80, 0xb0, 0x66,
	0x93, 0x39, 0x31, 0x3f, 0x67, 0x7d, 0xba, 0x19, 0x12, 0xe9, 0x6a, 0x02, 0x57, 0x94, 0xe6, 0x96,
	0x72, 0xe2, 0x31, 0x63, 0xa2, 0x90, 0xf0, 0x28, 0xe6, 0x4e, 0x32, 0x08, 0xfc, 0x72, 0x1e, 0xca,
	0x69, 0xbb, 0xca, 0xc7, 0x1f, 0xc3, 0xba, 0xcc, 0x52, 0x4d, 0xc6, 0x22, 0xdb, 0xf1, 0xdb, 0x6d,
	0xe6, 0xc4, 0xcc, 0xcd, 0x96, 0x36, 0x09, 0x42, 0xc5, 0x9d, 0x3d, 0xd0, 0x40, 0x72, 0x02, 0x6b,
	0x03, 0x84, 0x8d, 0x6e, 0xe8, 0x31, 0x37, 0x5b, 0xfe, 0x5c, 0x49, 0xd8, 0xea, 0x88, 0x22, 0x1f,
	0x41, 0x41, 0x38, 0xa8, 0xd1, 0xb3, 0xc5, 0xbc, 0xb3, 0x39, 0x8f, 0x5d, 0xe6, 0xcd, 0x94, 0x10,
	0x78, 0xd6, 0x0b, 0x06, 0x6c, 0xd3, 0x1d, 0x72, 0x93, 0xb1, 0x7a, 0x4f, 0x6c, 0x91, 0xa7, 0x70,
	0x65, 0xa8, 0xdd, 0x9a, 0xbd, 0x7a, 0xad, 0x0d, 0x36, 0x5d, 0x32, 0xeb, 0x54, 0xe1, 0x8a, 0x2b,
	0x6b, 0xb8, 0x34, 0x95, 0xe2, 0x9d, 0x60, 0xca, 0xcd, 0x59, 0x6b, 0x6a, 0x4b, 0x58, 0x73, 0x88,
	0x1b, 0xe6, 0x5f, 0x0d, 0x58, 0x1b, 0xd3, 0x95, 0x5c, 0x87, 0x9c, 0xb0, 0x11, 0x0d, 0x54, 0x1d,
	0x7a, 0x53, 0x0a, 0xf5, 0x0b, 0x48, 0xff, 0x56, 0xe6, 0xb2, 0x17, 0x90, 0xfe, 0x8d, 0x1c, 0xf7,
	0x3b, 0xda, 0x59, 0x43, 0x57, 0x67, 0x2f, 0x0c, 0xb3, 0x9f, 0x19, 0xb0, 0x33, 0xf4, 0xb1, 0xa6,
	0x0d, 0x1c, 0x13, 0xd3, 0xd1, 0x3a, 0x2c, 0xca, 0x24, 0x81, 0x36, 0x58, 0xf2, 0x07, 0xb9, 0x0a,
	0x4b, 0x83, 0xc9, 0xc7, 0x52, 0xbf, 0xc8, 0x06, 0x2c, 0xc9, 0xe4, 0x85, 0x97, 0x94, 0xb3, 0x16,
	0x31, 0x6d, 0x99, 0x7f, 0x9e, 0x87, 0x9b, 0x6f, 0x50, 0x41, 0xc5, 0xf4, 0x2d, 0x28, 0x69, 0x83,
	0xa3, 0x20, 0x64, 0x54, 0x45, 0xb3, 0xa5, 0x7b, 0xee, 0xa7, 0xb8, 0x48, 0x6e, 0x00, 0x78, 0xec,
	0xa5, 0x16, 0x91, 0x6a, 0xe5, 0x3d, 0xf6, 0x52, 0x6d, 0xdf, 0x05, 0x22, 0xb7, 0x6c, 0xde, 0x09,
	0x42, 0xff, 0x9c, 0x75, 0x58, 0xa2, 0xe6, 0x9a, 0xdc, 0x39, 0xe9, 0x6f, 0x88, 0x8b, 0xc4, 0xf6,
	0x93, 0x06, 0x52, 0xe7, 0xbc, 0x75, 0x59, 0xfc, 0x3e, 0x0c, 0x7a, 0xe4, 0x5d, 0x50, 0xf2, 0x83,
	0x55, 0x65, 0x11, 0x65, 0x56, 0xe5, 0xc6, 0x40, 0xc9, 0xd8, 0x85, 0x62, 0x3f, 0x3f, 0x08, 0x32,
	0x2c, 0xd0, 0xd6, 0x72, 0xb2, 0x28, 0x18, 0xbf, 0x03, 0xd7, 0x74, 0x9a, 0x73, 0x6d, 0x97, 0xf2,
	0x76, 0x2f, 0x99, 0xc5, 0xb0, 0x18, 0x5b, 0x1b, 0xc9, 0xf6, 0x91, 0xd8, 0xd5, 0xd3, 0xd6, 0x36,
	0x14, 0x54, 0x7b, 0x8c, 0xb3, 0x0d, 0x56, 0x5c, 0x0b, 0xe4, 0x12, 0x8e, 0x36, 0xfb, 0xa0, 0xbb,
	0x47, 0xbb, 0xc1, 0xa2, 0xd8, 0x6e, 0x70, 0x57, 0x16, 0x53, 0x4b, 0xbb, 0xb4, 0xce, 0xa2, 0xb8,
	0xce, 0xdd, 0x31, 0x49, 0x1a, 0x9d, 0xc9, 0x4a, 0x39, 0x24, 0x79, 0x18, 0x9d, 0xdd, 0xfb, 0x72,
	0x19, 0x16, 0xf1, 0xd2, 0xc8, 0x0b, 0x58, 0x92, 0xef, 0x0b, 0x64, 0xac, 0x1d, 0x1e, 0x7f, 0xc2,
	0x28, 0xef, 0xbe, 0x51, 0x46, 0xde, 0xb5, 0x59, 0xf9, 0xf9, 0xdf, 0xfe, 0xfd, 0xdb, 0xb9, 0x4d,
	0x72, 0xb5, 0x96, 0xfa, 0x7e, 0x42, 0x7e, 0x65, 0x40, 0x3e, 0x79, 0x7e, 0x20, 0xb7, 0x52, 0x29,
	0x47, 0x5f, 0x34, 0xca, 0x7b, 0xd3, 0xc4, 0xd4, 0xe1, 0xef, 0xe1, 0xe1, 0x7b, 0xe4, 0xed, 0xd1,
	0xc3, 0x65, 0x51, 0x6c, 0xf8, 0xfe, 0x59, 0xed, 0x13, 0xf5, 0x39, 0x7c, 0x4a, 0x3e, 0x33, 0xa0,
	0x30, 0xf0, 0x7e, 0x40, 0xde, 0x49, 0x3d, 0x65, 0xfc, 0x5d, 0xa2, 0xbc, 0x3f, 0x5d, 0x50, 0x29,
	0x54, 0x45, 0x85, 0xf6, 0xc9, 0xde, 0xa8, 0x42, 0xdd, 0xa8, 0x3f, 0xae, 0xd7, 0x3e, 0x51, 0x6f,
	0x00, 0x9f, 0x92, 0xcf, 0x0d, 0x58, 0x1e, 0xfc, 0x84, 0xc8, 0xfe, 0x64, 0xcb, 0x47, 0x94, 0xba,
	0x9d, 0x41, 0x52, 0x69, 0x55, 0x43, 0xad, 0x6e, 0x93, 0x77, 0xd2, 0xdd, 0x34, 0xae, 0xd6, 0x2f,
	0x0c, 0xc8, 0xe9, 0xc1, 0x9c, 0xbc, 0x9d, 0x7a, 0xd0, 0xc8, 0xa4, 0x5f, 0xbe, 0x35, 0x45, 0x4a,
	0xa9, 0xf2, 0x2e, 0xaa, 0x72, 0x8b, 0xec, 0x8e, 0xaa, 0x92, 0x0c, 0xf4, 0x03, 0x17, 0x16, 0xc2,
	0x92, 0x9c, 0x78, 0x27, 0x84, 0xeb, 0xd0, 0x94, 0x3c, 0x21, 0x5c, 0x87, 0x47, 0x66, 0x73, 0x1b,
	0xcf, 0xbf, 0x4e, 0xae, 0x8d, 0x9e, 0xdf, 0x76, 0xf0, 0x74, 0xf2, 0x3b, 0x03, 0xc8, 0xf8, 0x68,
	0x48, 0xaa, 0xa9, 0xe4, 0x13, 0x27, 0xd4, 0x72, 0x2d, 0xb3, 0xfc, 0xb4, 0x50, 0xd6, 0x35, 0x4e,
	0xe5, 0x0d, 0x39, 0x9c, 0x7e, 0x61, 0xc0, 0xea, 0xe8, 0x08, 0x46, 0xde, 0x4b, 0x77, 0x40, 0xfa,
	0x8c, 0x57, 0xbe, 0x9b, 0x51, 0x5a, 0xe9, 0x77, 0x1b, 0xf5, 0xdb, 0x25, 0x37, 0xc7, 0x1c, 0x97,
	0x0c, 0xb6, 0x6a, 0x26, 0xc0, 0xa0, 0x1e, 0xec, 0x27, 0x27, 0x04, 0x75, 0x4a, 0x33, 0x3d, 0x21,
	0xa8, 0xd3, 0x9a, 0xd3, 0xc9, 0x41, 0xad, 0x33, 0x2f, 0x76, 0x05, 0x03, 0xd1, 0xf4, 0x6b, 0x03,
	0x8a, 0x43, 0x3d, 0x18, 0x49, 0x3f, 0x2d, 0xad, 0x8b, 0x2b, 0xdf, 0xc9, 0x22, 0xaa, 0x34, 0xdb,
	0x43, 0xcd, 0x76, 0x48, 0x65, 0x54, 0x33, 0xd1, 0x68, 0x44, 0xfd, 0xe3, 0xff, 0x60, 0xc0, 0x7a,
	0x5a, 0x1d, 0x25, 0xef, 0xbf, 0xd1, 0x0b, 0x69, 0xc9, 0xe0, 0x60, 0x06, 0xc4, 0xb4, 0x54, 0x95,
	0xf8, 0x6f, 0x28, 0x3b, 0xd4, 0xef, 0x7e, 0xf5, 0xaa, 0x62, 0x7c, 0xfd, 0xaa, 0x62, 0xfc, 0xeb,
	0x55, 0xc5, 0xf8, 0xec, 0x75, 0xe5, 0xd2, 0xd7, 0xaf, 0x2b, 0x97, 0xfe, 0xf1, 0xba, 0x72, 0xe9,
	0xa7, 0x57, 0x34, 0xc1, 0x05, 0x52, 0xe0, 0xdb, 0x78, 0x63, 0x09, 0x1f, 0xc7, 0x3f, 0xf8, 0x7f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x22, 0x60, 0xaf, 0x8a, 0x16, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// OrderBook Queries a list of OrderBook items.
	OrderBook(ctx context.Context, in *QueryOrderBookRequest, opts ...grpc.CallOption) (*QueryOrderBookResponse, error)
	// UserRewards Queries a list of UserRewards items.
	UserRewards(ctx context.Context, in *QueryUserRewardsRequest, opts ...grpc.CallOption) (*QueryUserRewardsResponse, error)
	// OrderRewards Queries rewards for specific orders.
	OrderRewards(ctx context.Context, in *QueryOrderRewardsRequest, opts ...grpc.CallOption) (*QueryOrderRewardsResponse, error)
	// TierInfo Queries current tier information.
	TierInfo(ctx context.Context, in *QueryTierInfoRequest, opts ...grpc.CallOption) (*QueryTierInfoResponse, error)
	// LCInfo Queries LiquidityCoin information.
	LCInfo(ctx context.Context, in *QueryLCInfoRequest, opts ...grpc.CallOption) (*QueryLCInfoResponse, error)
	// DynamicRewardState Queries dynamic reward state information.
	DynamicRewardState(ctx context.Context, in *QueryDynamicRewardStateRequest, opts ...grpc.CallOption) (*QueryDynamicRewardStateResponse, error)
	// LiquidityBalance Queries current buy/sell liquidity balance.
	LiquidityBalance(ctx context.Context, in *QueryLiquidityBalanceRequest, opts ...grpc.CallOption) (*QueryLiquidityBalanceResponse, error)
	// EstimateFees calculates estimated fees for an order
	EstimateFees(ctx context.Context, in *QueryEstimateFeesRequest, opts ...grpc.CallOption) (*QueryEstimateFeesResponse, error)
	// FeeStatistics queries fee collection statistics
	FeeStatistics(ctx context.Context, in *QueryFeeStatisticsRequest, opts ...grpc.CallOption) (*QueryFeeStatisticsResponse, error)
	// EstimateOrderRewards estimates rewards for a potential order
	EstimateOrderRewards(ctx context.Context, in *QueryEstimateOrderRewardsRequest, opts ...grpc.CallOption) (*QueryEstimateOrderRewardsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mychain.dex.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderBook(ctx context.Context, in *QueryOrderBookRequest, opts ...grpc.CallOption) (*QueryOrderBookResponse, error) {
	out := new(QueryOrderBookResponse)
	err := c.cc.Invoke(ctx, "/mychain.dex.v1.Query/OrderBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserRewards(ctx context.Context, in *QueryUserRewardsRequest, opts ...grpc.CallOption) (*QueryUserRewardsResponse, error) {
	out := new(QueryUserRewardsResponse)
	err := c.cc.Invoke(ctx, "/mychain.dex.v1.Query/UserRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderRewards(ctx context.Context, in *QueryOrderRewardsRequest, opts ...grpc.CallOption) (*QueryOrderRewardsResponse, error) {
	out := new(QueryOrderRewardsResponse)
	err := c.cc.Invoke(ctx, "/mychain.dex.v1.Query/OrderRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TierInfo(ctx context.Context, in *QueryTierInfoRequest, opts ...grpc.CallOption) (*QueryTierInfoResponse, error) {
	out := new(QueryTierInfoResponse)
	err := c.cc.Invoke(ctx, "/mychain.dex.v1.Query/TierInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LCInfo(ctx context.Context, in *QueryLCInfoRequest, opts ...grpc.CallOption) (*QueryLCInfoResponse, error) {
	out := new(QueryLCInfoResponse)
	err := c.cc.Invoke(ctx, "/mychain.dex.v1.Query/LCInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DynamicRewardState(ctx context.Context, in *QueryDynamicRewardStateRequest, opts ...grpc.CallOption) (*QueryDynamicRewardStateResponse, error) {
	out := new(QueryDynamicRewardStateResponse)
	err := c.cc.Invoke(ctx, "/mychain.dex.v1.Query/DynamicRewardState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityBalance(ctx context.Context, in *QueryLiquidityBalanceRequest, opts ...grpc.CallOption) (*QueryLiquidityBalanceResponse, error) {
	out := new(QueryLiquidityBalanceResponse)
	err := c.cc.Invoke(ctx, "/mychain.dex.v1.Query/LiquidityBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateFees(ctx context.Context, in *QueryEstimateFeesRequest, opts ...grpc.CallOption) (*QueryEstimateFeesResponse, error) {
	out := new(QueryEstimateFeesResponse)
	err := c.cc.Invoke(ctx, "/mychain.dex.v1.Query/EstimateFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeStatistics(ctx context.Context, in *QueryFeeStatisticsRequest, opts ...grpc.CallOption) (*QueryFeeStatisticsResponse, error) {
	out := new(QueryFeeStatisticsResponse)
	err := c.cc.Invoke(ctx, "/mychain.dex.v1.Query/FeeStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateOrderRewards(ctx context.Context, in *QueryEstimateOrderRewardsRequest, opts ...grpc.CallOption) (*QueryEstimateOrderRewardsResponse, error) {
	out := new(QueryEstimateOrderRewardsResponse)
	err := c.cc.Invoke(ctx, "/mychain.dex.v1.Query/EstimateOrderRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// OrderBook Queries a list of OrderBook items.
	OrderBook(context.Context, *QueryOrderBookRequest) (*QueryOrderBookResponse, error)
	// UserRewards Queries a list of UserRewards items.
	UserRewards(context.Context, *QueryUserRewardsRequest) (*QueryUserRewardsResponse, error)
	// OrderRewards Queries rewards for specific orders.
	OrderRewards(context.Context, *QueryOrderRewardsRequest) (*QueryOrderRewardsResponse, error)
	// TierInfo Queries current tier information.
	TierInfo(context.Context, *QueryTierInfoRequest) (*QueryTierInfoResponse, error)
	// LCInfo Queries LiquidityCoin information.
	LCInfo(context.Context, *QueryLCInfoRequest) (*QueryLCInfoResponse, error)
	// DynamicRewardState Queries dynamic reward state information.
	DynamicRewardState(context.Context, *QueryDynamicRewardStateRequest) (*QueryDynamicRewardStateResponse, error)
	// LiquidityBalance Queries current buy/sell liquidity balance.
	LiquidityBalance(context.Context, *QueryLiquidityBalanceRequest) (*QueryLiquidityBalanceResponse, error)
	// EstimateFees calculates estimated fees for an order
	EstimateFees(context.Context, *QueryEstimateFeesRequest) (*QueryEstimateFeesResponse, error)
	// FeeStatistics queries fee collection statistics
	FeeStatistics(context.Context, *QueryFeeStatisticsRequest) (*QueryFeeStatisticsResponse, error)
	// EstimateOrderRewards estimates rewards for a potential order
	EstimateOrderRewards(context.Context, *QueryEstimateOrderRewardsRequest) (*QueryEstimateOrderRewardsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) OrderBook(ctx context.Context, req *QueryOrderBookRequest) (*QueryOrderBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBook not implemented")
}
func (*UnimplementedQueryServer) UserRewards(ctx context.Context, req *QueryUserRewardsRequest) (*QueryUserRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRewards not implemented")
}
func (*UnimplementedQueryServer) OrderRewards(ctx context.Context, req *QueryOrderRewardsRequest) (*QueryOrderRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderRewards not implemented")
}
func (*UnimplementedQueryServer) TierInfo(ctx context.Context, req *QueryTierInfoRequest) (*QueryTierInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TierInfo not implemented")
}
func (*UnimplementedQueryServer) LCInfo(ctx context.Context, req *QueryLCInfoRequest) (*QueryLCInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LCInfo not implemented")
}
func (*UnimplementedQueryServer) DynamicRewardState(ctx context.Context, req *QueryDynamicRewardStateRequest) (*QueryDynamicRewardStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynamicRewardState not implemented")
}
func (*UnimplementedQueryServer) LiquidityBalance(ctx context.Context, req *QueryLiquidityBalanceRequest) (*QueryLiquidityBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityBalance not implemented")
}
func (*UnimplementedQueryServer) EstimateFees(ctx context.Context, req *QueryEstimateFeesRequest) (*QueryEstimateFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateFees not implemented")
}
func (*UnimplementedQueryServer) FeeStatistics(ctx context.Context, req *QueryFeeStatisticsRequest) (*QueryFeeStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeStatistics not implemented")
}
func (*UnimplementedQueryServer) EstimateOrderRewards(ctx context.Context, req *QueryEstimateOrderRewardsRequest) (*QueryEstimateOrderRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateOrderRewards not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mychain.dex.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mychain.dex.v1.Query/OrderBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderBook(ctx, req.(*QueryOrderBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mychain.dex.v1.Query/UserRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserRewards(ctx, req.(*QueryUserRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mychain.dex.v1.Query/OrderRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderRewards(ctx, req.(*QueryOrderRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TierInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTierInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TierInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mychain.dex.v1.Query/TierInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TierInfo(ctx, req.(*QueryTierInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LCInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLCInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LCInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mychain.dex.v1.Query/LCInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LCInfo(ctx, req.(*QueryLCInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DynamicRewardState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDynamicRewardStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DynamicRewardState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mychain.dex.v1.Query/DynamicRewardState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DynamicRewardState(ctx, req.(*QueryDynamicRewardStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mychain.dex.v1.Query/LiquidityBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityBalance(ctx, req.(*QueryLiquidityBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimateFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mychain.dex.v1.Query/EstimateFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateFees(ctx, req.(*QueryEstimateFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mychain.dex.v1.Query/FeeStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeStatistics(ctx, req.(*QueryFeeStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateOrderRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimateOrderRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateOrderRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mychain.dex.v1.Query/EstimateOrderRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateOrderRewards(ctx, req.(*QueryEstimateOrderRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mychain.dex.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "OrderBook",
			Handler:    _Query_OrderBook_Handler,
		},
		{
			MethodName: "UserRewards",
			Handler:    _Query_UserRewards_Handler,
		},
		{
			MethodName: "OrderRewards",
			Handler:    _Query_OrderRewards_Handler,
		},
		{
			MethodName: "TierInfo",
			Handler:    _Query_TierInfo_Handler,
		},
		{
			MethodName: "LCInfo",
			Handler:    _Query_LCInfo_Handler,
		},
		{
			MethodName: "DynamicRewardState",
			Handler:    _Query_DynamicRewardState_Handler,
		},
		{
			MethodName: "LiquidityBalance",
			Handler:    _Query_LiquidityBalance_Handler,
		},
		{
			MethodName: "EstimateFees",
			Handler:    _Query_EstimateFees_Handler,
		},
		{
			MethodName: "FeeStatistics",
			Handler:    _Query_FeeStatistics_Handler,
		},
		{
			MethodName: "EstimateOrderRewards",
			Handler:    _Query_EstimateOrderRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mychain/dex/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOrderBookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderBookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderBookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderBookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderBookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderBookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellOrders) > 0 {
		for iNdEx := len(m.SellOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BuyOrders) > 0 {
		for iNdEx := len(m.BuyOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ClaimedLc.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.PendingLc.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOrderRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderIds) > 0 {
		dAtA5 := make([]byte, len(m.OrderIds)*10)
		var j4 int
		for _, num := range m.OrderIds {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintQuery(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalPending.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.OrderRewards) > 0 {
		for iNdEx := len(m.OrderRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTierInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTierInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTierInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTierInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTierInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTierInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ReferencePrice.Size()
		i -= size
		if _, err := m.ReferencePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CurrentPrice.Size()
		i -= size
		if _, err := m.CurrentPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.TierInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.CurrentTier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentTier))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLCInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLCInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLCInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLCInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLCInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLCInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BaseRewardRate.Size()
		i -= size
		if _, err := m.BaseRewardRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ExchangeRate.Size()
		i -= size
		if _, err := m.ExchangeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TotalSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDynamicRewardStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDynamicRewardStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDynamicRewardStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDynamicRewardStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDynamicRewardStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDynamicRewardStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PriceRatio.Size()
		i -= size
		if _, err := m.PriceRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.LiquidityTarget.Size()
		i -= size
		if _, err := m.LiquidityTarget.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.CurrentLiquidity.Size()
		i -= size
		if _, err := m.CurrentLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CurrentApr.Size()
		i -= size
		if _, err := m.CurrentApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.SellMultiplier.Size()
		i -= size
		if _, err := m.SellMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.BuyMultiplier.Size()
		i -= size
		if _, err := m.BuyMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.BalanceRatio.Size()
		i -= size
		if _, err := m.BalanceRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.SellRatio.Size()
		i -= size
		if _, err := m.SellRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.BuyRatio.Size()
		i -= size
		if _, err := m.BuyRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.SellOrderCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SellOrderCount))
		i--
		dAtA[i] = 0x28
	}
	if m.BuyOrderCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BuyOrderCount))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.TotalLiquidity.Size()
		i -= size
		if _, err := m.TotalLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.SellLiquidity.Size()
		i -= size
		if _, err := m.SellLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.BuyLiquidity.Size()
		i -= size
		if _, err := m.BuyLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEstimateFeesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateFeesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.OrderPrice.Size()
		i -= size
		if _, err := m.OrderPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.OrderAmount.Size()
		i -= size
		if _, err := m.OrderAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.IsBuyOrder {
		i--
		if m.IsBuyOrder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.EffectiveFeeRate.Size()
		i -= size
		if _, err := m.EffectiveFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TakerFeeRate.Size()
		i -= size
		if _, err := m.TakerFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MakerFeeRate.Size()
		i -= size
		if _, err := m.MakerFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Estimate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFeeStatisticsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeStatisticsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeStatisticsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryFeeStatisticsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeStatisticsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeStatisticsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DynamicFeesActive {
		i--
		if m.DynamicFeesActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.CurrentPriceRatio.Size()
		i -= size
		if _, err := m.CurrentPriceRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.FeeByType) > 0 {
		for iNdEx := len(m.FeeByType) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeByType[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.TotalFeesBurned.Size()
		i -= size
		if _, err := m.TotalFeesBurned.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalFeesCollected.Size()
		i -= size
		if _, err := m.TotalFeesCollected.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FeeTypeStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeTypeStatistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeTypeStatistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CurrentRate.Size()
		i -= size
		if _, err := m.CurrentRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalCollected.Size()
		i -= size
		if _, err := m.TotalCollected.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.FeeType) > 0 {
		i -= len(m.FeeType)
		copy(dAtA[i:], m.FeeType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeeType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateOrderRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateOrderRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateOrderRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsBuy {
		i--
		if m.IsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x12
	}
	if m.PairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateOrderRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateOrderRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateOrderRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentBestAsk) > 0 {
		i -= len(m.CurrentBestAsk)
		copy(dAtA[i:], m.CurrentBestAsk)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CurrentBestAsk)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CurrentBestBid) > 0 {
		i -= len(m.CurrentBestBid)
		copy(dAtA[i:], m.CurrentBestBid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CurrentBestBid)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RewardTier) > 0 {
		i -= len(m.RewardTier)
		copy(dAtA[i:], m.RewardTier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RewardTier)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EstimatedDailyRewards) > 0 {
		i -= len(m.EstimatedDailyRewards)
		copy(dAtA[i:], m.EstimatedDailyRewards)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EstimatedDailyRewards)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EffectiveApy) > 0 {
		i -= len(m.EffectiveApy)
		copy(dAtA[i:], m.EffectiveApy)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EffectiveApy)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SpreadMultiplier) > 0 {
		i -= len(m.SpreadMultiplier)
		copy(dAtA[i:], m.SpreadMultiplier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpreadMultiplier)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BaseApy) > 0 {
		i -= len(m.BaseApy)
		copy(dAtA[i:], m.BaseApy)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseApy)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SpreadImprovement) > 0 {
		i -= len(m.SpreadImprovement)
		copy(dAtA[i:], m.SpreadImprovement)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpreadImprovement)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewSpread) > 0 {
		i -= len(m.NewSpread)
		copy(dAtA[i:], m.NewSpread)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NewSpread)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CurrentSpread) > 0 {
		i -= len(m.CurrentSpread)
		copy(dAtA[i:], m.CurrentSpread)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CurrentSpread)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOrderBookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PairId != 0 {
		n += 1 + sovQuery(uint64(m.PairId))
	}
	return n
}

func (m *QueryOrderBookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BuyOrders) > 0 {
		for _, e := range m.BuyOrders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.SellOrders) > 0 {
		for _, e := range m.SellOrders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUserRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PendingLc.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.ClaimedLc.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOrderRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.OrderIds) > 0 {
		l = 0
		for _, e := range m.OrderIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryOrderRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrderRewards) > 0 {
		for _, e := range m.OrderRewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.TotalPending.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTierInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PairId != 0 {
		n += 1 + sovQuery(uint64(m.PairId))
	}
	return n
}

func (m *QueryTierInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentTier != 0 {
		n += 1 + sovQuery(uint64(m.CurrentTier))
	}
	l = m.TierInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.CurrentPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.ReferencePrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLCInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLCInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalSupply.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.ExchangeRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.BaseRewardRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDynamicRewardStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDynamicRewardStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.State.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.CurrentLiquidity.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LiquidityTarget.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.PriceRatio.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLiquidityBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PairId != 0 {
		n += 1 + sovQuery(uint64(m.PairId))
	}
	return n
}

func (m *QueryLiquidityBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BuyLiquidity.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.SellLiquidity.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalLiquidity.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.BuyOrderCount != 0 {
		n += 1 + sovQuery(uint64(m.BuyOrderCount))
	}
	if m.SellOrderCount != 0 {
		n += 1 + sovQuery(uint64(m.SellOrderCount))
	}
	l = m.BuyRatio.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.SellRatio.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.BalanceRatio.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.BuyMultiplier.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.SellMultiplier.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.CurrentApr.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEstimateFeesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PairId != 0 {
		n += 1 + sovQuery(uint64(m.PairId))
	}
	if m.IsBuyOrder {
		n += 2
	}
	l = m.OrderAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.OrderPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEstimateFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Estimate.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.MakerFeeRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TakerFeeRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.EffectiveFeeRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFeeStatisticsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryFeeStatisticsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalFeesCollected.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalFeesBurned.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.FeeByType) > 0 {
		for _, e := range m.FeeByType {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.CurrentPriceRatio.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.DynamicFeesActive {
		n += 2
	}
	return n
}

func (m *FeeTypeStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeeType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.TotalCollected.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.CurrentRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEstimateOrderRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PairId != 0 {
		n += 1 + sovQuery(uint64(m.PairId))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IsBuy {
		n += 2
	}
	return n
}

func (m *QueryEstimateOrderRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrentSpread)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NewSpread)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SpreadImprovement)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BaseApy)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SpreadMultiplier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EffectiveApy)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EstimatedDailyRewards)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RewardTier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CurrentBestBid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CurrentBestAsk)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderBookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderBookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderBookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderBookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderBookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderBookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyOrders = append(m.BuyOrders, Order{})
			if err := m.BuyOrders[len(m.BuyOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellOrders = append(m.SellOrders, Order{})
			if err := m.SellOrders[len(m.SellOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingLc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingLc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedLc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimedLc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OrderIds = append(m.OrderIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OrderIds) == 0 {
					m.OrderIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OrderIds = append(m.OrderIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderRewards = append(m.OrderRewards, OrderRewardInfo{})
			if err := m.OrderRewards[len(m.OrderRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPending", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalPending.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTierInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTierInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTierInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTierInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTierInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTierInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTier", wireType)
			}
			m.CurrentTier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTier |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TierInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TierInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferencePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReferencePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLCInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLCInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLCInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLCInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLCInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLCInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRewardRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseRewardRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDynamicRewardStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDynamicRewardStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDynamicRewardStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDynamicRewardStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDynamicRewardStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDynamicRewardStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidityTarget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PriceRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BuyLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SellLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyOrderCount", wireType)
			}
			m.BuyOrderCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyOrderCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderCount", wireType)
			}
			m.SellOrderCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellOrderCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BuyRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SellRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BalanceRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BuyMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SellMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateFeesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuyOrder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuyOrder = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrderAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrderPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Estimate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MakerFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakerFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EffectiveFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeStatisticsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeStatisticsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeStatisticsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeStatisticsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeStatisticsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeStatisticsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFeesCollected", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalFeesCollected.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFeesBurned", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalFeesBurned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeByType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeByType = append(m.FeeByType, FeeTypeStatistics{})
			if err := m.FeeByType[len(m.FeeByType)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPriceRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentPriceRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicFeesActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DynamicFeesActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeTypeStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeTypeStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeTypeStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCollected", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalCollected.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateOrderRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateOrderRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateOrderRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateOrderRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateOrderRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateOrderRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSpread", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentSpread = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSpread", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewSpread = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpreadImprovement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpreadImprovement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseApy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseApy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpreadMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpreadMultiplier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveApy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EffectiveApy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedDailyRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EstimatedDailyRewards = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardTier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardTier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBestBid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentBestBid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBestAsk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentBestAsk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
