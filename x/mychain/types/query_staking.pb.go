// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mychain/mychain/v1/query_staking.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryStakingInfoRequest is request type for the Query/StakingInfo RPC method.
type QueryStakingInfoRequest struct {
}

func (m *QueryStakingInfoRequest) Reset()         { *m = QueryStakingInfoRequest{} }
func (m *QueryStakingInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakingInfoRequest) ProtoMessage()    {}
func (*QueryStakingInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8e314410a26b97, []int{0}
}
func (m *QueryStakingInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakingInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakingInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakingInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakingInfoRequest.Merge(m, src)
}
func (m *QueryStakingInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakingInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakingInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakingInfoRequest proto.InternalMessageInfo

// QueryStakingInfoResponse is response type for the Query/StakingInfo RPC method.
type QueryStakingInfoResponse struct {
	Info *StakingInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *QueryStakingInfoResponse) Reset()         { *m = QueryStakingInfoResponse{} }
func (m *QueryStakingInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakingInfoResponse) ProtoMessage()    {}
func (*QueryStakingInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8e314410a26b97, []int{1}
}
func (m *QueryStakingInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakingInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakingInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakingInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakingInfoResponse.Merge(m, src)
}
func (m *QueryStakingInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakingInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakingInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakingInfoResponse proto.InternalMessageInfo

func (m *QueryStakingInfoResponse) GetInfo() *StakingInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// StakingInfo contains current staking information
type StakingInfo struct {
	TotalSupply            string `protobuf:"bytes,1,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	TotalStaked            string `protobuf:"bytes,2,opt,name=total_staked,json=totalStaked,proto3" json:"total_staked,omitempty"`
	EffectiveApr           string `protobuf:"bytes,3,opt,name=effective_apr,json=effectiveApr,proto3" json:"effective_apr,omitempty"`
	AnnualRewards          string `protobuf:"bytes,4,opt,name=annual_rewards,json=annualRewards,proto3" json:"annual_rewards,omitempty"`
	HourlyRewards          string `protobuf:"bytes,5,opt,name=hourly_rewards,json=hourlyRewards,proto3" json:"hourly_rewards,omitempty"`
	NumDelegators          int64  `protobuf:"varint,6,opt,name=num_delegators,json=numDelegators,proto3" json:"num_delegators,omitempty"`
	NextDistributionHeight int64  `protobuf:"varint,7,opt,name=next_distribution_height,json=nextDistributionHeight,proto3" json:"next_distribution_height,omitempty"`
}

func (m *StakingInfo) Reset()         { *m = StakingInfo{} }
func (m *StakingInfo) String() string { return proto.CompactTextString(m) }
func (*StakingInfo) ProtoMessage()    {}
func (*StakingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8e314410a26b97, []int{2}
}
func (m *StakingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingInfo.Merge(m, src)
}
func (m *StakingInfo) XXX_Size() int {
	return m.Size()
}
func (m *StakingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StakingInfo proto.InternalMessageInfo

func (m *StakingInfo) GetTotalSupply() string {
	if m != nil {
		return m.TotalSupply
	}
	return ""
}

func (m *StakingInfo) GetTotalStaked() string {
	if m != nil {
		return m.TotalStaked
	}
	return ""
}

func (m *StakingInfo) GetEffectiveApr() string {
	if m != nil {
		return m.EffectiveApr
	}
	return ""
}

func (m *StakingInfo) GetAnnualRewards() string {
	if m != nil {
		return m.AnnualRewards
	}
	return ""
}

func (m *StakingInfo) GetHourlyRewards() string {
	if m != nil {
		return m.HourlyRewards
	}
	return ""
}

func (m *StakingInfo) GetNumDelegators() int64 {
	if m != nil {
		return m.NumDelegators
	}
	return 0
}

func (m *StakingInfo) GetNextDistributionHeight() int64 {
	if m != nil {
		return m.NextDistributionHeight
	}
	return 0
}

// QueryStakingDistributionHistoryRequest is request type for the Query/StakingDistributionHistory RPC method.
type QueryStakingDistributionHistoryRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *QueryStakingDistributionHistoryRequest) Reset() {
	*m = QueryStakingDistributionHistoryRequest{}
}
func (m *QueryStakingDistributionHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakingDistributionHistoryRequest) ProtoMessage()    {}
func (*QueryStakingDistributionHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8e314410a26b97, []int{3}
}
func (m *QueryStakingDistributionHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakingDistributionHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakingDistributionHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakingDistributionHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakingDistributionHistoryRequest.Merge(m, src)
}
func (m *QueryStakingDistributionHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakingDistributionHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakingDistributionHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakingDistributionHistoryRequest proto.InternalMessageInfo

func (m *QueryStakingDistributionHistoryRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryStakingDistributionHistoryRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// QueryStakingDistributionHistoryResponse is response type for the Query/StakingDistributionHistory RPC method.
type QueryStakingDistributionHistoryResponse struct {
	Distributions []*StakingDistributionRecord `protobuf:"bytes,1,rep,name=distributions,proto3" json:"distributions,omitempty"`
	Total         uint64                       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *QueryStakingDistributionHistoryResponse) Reset() {
	*m = QueryStakingDistributionHistoryResponse{}
}
func (m *QueryStakingDistributionHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakingDistributionHistoryResponse) ProtoMessage()    {}
func (*QueryStakingDistributionHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8e314410a26b97, []int{4}
}
func (m *QueryStakingDistributionHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakingDistributionHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakingDistributionHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakingDistributionHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakingDistributionHistoryResponse.Merge(m, src)
}
func (m *QueryStakingDistributionHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakingDistributionHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakingDistributionHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakingDistributionHistoryResponse proto.InternalMessageInfo

func (m *QueryStakingDistributionHistoryResponse) GetDistributions() []*StakingDistributionRecord {
	if m != nil {
		return m.Distributions
	}
	return nil
}

func (m *QueryStakingDistributionHistoryResponse) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

// StakingDistributionRecord represents a staking reward distribution event
type StakingDistributionRecord struct {
	Height             int64  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp          int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TotalSupply        string `protobuf:"bytes,3,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	TotalStaked        string `protobuf:"bytes,4,opt,name=total_staked,json=totalStaked,proto3" json:"total_staked,omitempty"`
	RewardsDistributed string `protobuf:"bytes,5,opt,name=rewards_distributed,json=rewardsDistributed,proto3" json:"rewards_distributed,omitempty"`
	EffectiveApr       string `protobuf:"bytes,6,opt,name=effective_apr,json=effectiveApr,proto3" json:"effective_apr,omitempty"`
	NumDelegators      int64  `protobuf:"varint,7,opt,name=num_delegators,json=numDelegators,proto3" json:"num_delegators,omitempty"`
}

func (m *StakingDistributionRecord) Reset()         { *m = StakingDistributionRecord{} }
func (m *StakingDistributionRecord) String() string { return proto.CompactTextString(m) }
func (*StakingDistributionRecord) ProtoMessage()    {}
func (*StakingDistributionRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8e314410a26b97, []int{5}
}
func (m *StakingDistributionRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingDistributionRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingDistributionRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingDistributionRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingDistributionRecord.Merge(m, src)
}
func (m *StakingDistributionRecord) XXX_Size() int {
	return m.Size()
}
func (m *StakingDistributionRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingDistributionRecord.DiscardUnknown(m)
}

var xxx_messageInfo_StakingDistributionRecord proto.InternalMessageInfo

func (m *StakingDistributionRecord) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StakingDistributionRecord) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *StakingDistributionRecord) GetTotalSupply() string {
	if m != nil {
		return m.TotalSupply
	}
	return ""
}

func (m *StakingDistributionRecord) GetTotalStaked() string {
	if m != nil {
		return m.TotalStaked
	}
	return ""
}

func (m *StakingDistributionRecord) GetRewardsDistributed() string {
	if m != nil {
		return m.RewardsDistributed
	}
	return ""
}

func (m *StakingDistributionRecord) GetEffectiveApr() string {
	if m != nil {
		return m.EffectiveApr
	}
	return ""
}

func (m *StakingDistributionRecord) GetNumDelegators() int64 {
	if m != nil {
		return m.NumDelegators
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryStakingInfoRequest)(nil), "mychain.mychain.v1.QueryStakingInfoRequest")
	proto.RegisterType((*QueryStakingInfoResponse)(nil), "mychain.mychain.v1.QueryStakingInfoResponse")
	proto.RegisterType((*StakingInfo)(nil), "mychain.mychain.v1.StakingInfo")
	proto.RegisterType((*QueryStakingDistributionHistoryRequest)(nil), "mychain.mychain.v1.QueryStakingDistributionHistoryRequest")
	proto.RegisterType((*QueryStakingDistributionHistoryResponse)(nil), "mychain.mychain.v1.QueryStakingDistributionHistoryResponse")
	proto.RegisterType((*StakingDistributionRecord)(nil), "mychain.mychain.v1.StakingDistributionRecord")
}

func init() {
	proto.RegisterFile("mychain/mychain/v1/query_staking.proto", fileDescriptor_3f8e314410a26b97)
}

var fileDescriptor_3f8e314410a26b97 = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xb1, 0x6e, 0xdb, 0x30,
	0x10, 0xb5, 0x6c, 0xc7, 0x41, 0xe8, 0xb8, 0x03, 0x1b, 0x24, 0x4a, 0x10, 0xa8, 0xae, 0x8a, 0xa6,
	0x5e, 0x6a, 0xc1, 0xc9, 0xd2, 0xb5, 0x85, 0x87, 0x76, 0x2a, 0x2a, 0x03, 0x1d, 0xba, 0x08, 0x8c,
	0x45, 0xc9, 0x44, 0x24, 0x52, 0x21, 0x4f, 0x6e, 0xf4, 0x17, 0x1d, 0xf2, 0x0f, 0xfd, 0x95, 0x8e,
	0x19, 0x3b, 0x16, 0xf6, 0x8f, 0x14, 0xa2, 0x68, 0x5b, 0xa9, 0xd3, 0x64, 0x12, 0xef, 0xbd, 0xc7,
	0x87, 0xf3, 0xdd, 0x33, 0xd1, 0x59, 0x5a, 0x4c, 0x67, 0x84, 0x71, 0x6f, 0xf5, 0x9d, 0x8f, 0xbc,
	0xeb, 0x9c, 0xca, 0x22, 0x50, 0x40, 0xae, 0x18, 0x8f, 0x87, 0x99, 0x14, 0x20, 0x30, 0x36, 0xfc,
	0x70, 0xf5, 0x9d, 0x8f, 0x4e, 0x4e, 0x63, 0x21, 0xe2, 0x84, 0x7a, 0x24, 0x63, 0x1e, 0xe1, 0x5c,
	0x00, 0x01, 0x26, 0xb8, 0xaa, 0x6e, 0x9c, 0x1c, 0xc4, 0x22, 0x16, 0xfa, 0xe8, 0x95, 0xa7, 0x0a,
	0x75, 0x8f, 0xd1, 0xd1, 0x97, 0xd2, 0x7e, 0x52, 0xb9, 0x7f, 0xe2, 0x91, 0xf0, 0xe9, 0x75, 0x4e,
	0x15, 0xb8, 0x9f, 0x91, 0xbd, 0x4d, 0xa9, 0x4c, 0x70, 0x45, 0xf1, 0x05, 0x6a, 0x33, 0x1e, 0x09,
	0xdb, 0xea, 0x5b, 0x83, 0xee, 0xf9, 0x8b, 0xe1, 0x76, 0x37, 0xc3, 0xfa, 0x35, 0x2d, 0x76, 0x7f,
	0x36, 0x51, 0xb7, 0x86, 0xe2, 0x97, 0x68, 0x1f, 0x04, 0x90, 0x24, 0x50, 0x79, 0x96, 0x25, 0x85,
	0x36, 0xdb, 0xf3, 0xbb, 0x1a, 0x9b, 0x68, 0xa8, 0x26, 0x01, 0x72, 0x45, 0x43, 0xbb, 0x59, 0x97,
	0x68, 0x08, 0xbf, 0x42, 0x3d, 0x1a, 0x45, 0x74, 0x0a, 0x6c, 0x4e, 0x03, 0x92, 0x49, 0xbb, 0xa5,
	0x35, 0xfb, 0x6b, 0xf0, 0x7d, 0x26, 0xf1, 0x6b, 0xf4, 0x8c, 0x70, 0x9e, 0x93, 0x24, 0x90, 0xf4,
	0x3b, 0x91, 0xa1, 0xb2, 0xdb, 0x5a, 0xd5, 0xab, 0x50, 0xbf, 0x02, 0x4b, 0xd9, 0x4c, 0xe4, 0x32,
	0x29, 0xd6, 0xb2, 0x9d, 0x4a, 0x56, 0xa1, 0x35, 0x19, 0xcf, 0xd3, 0x20, 0xa4, 0x09, 0x8d, 0x09,
	0x08, 0xa9, 0xec, 0x4e, 0xdf, 0x1a, 0xb4, 0xfc, 0x1e, 0xcf, 0xd3, 0xf1, 0x1a, 0xc4, 0xef, 0x90,
	0xcd, 0xe9, 0x0d, 0x04, 0x21, 0x53, 0x20, 0xd9, 0x65, 0x5e, 0x6e, 0x23, 0x98, 0x51, 0x16, 0xcf,
	0xc0, 0xde, 0xd5, 0x17, 0x0e, 0x4b, 0x7e, 0x5c, 0xa3, 0x3f, 0x6a, 0xd6, 0xfd, 0x8a, 0xce, 0xea,
	0xa3, 0xbf, 0xa7, 0x60, 0x0a, 0x84, 0x2c, 0xcc, 0x92, 0xf0, 0x01, 0xda, 0x49, 0x58, 0xca, 0x40,
	0x0f, 0xaf, 0xed, 0x57, 0x05, 0x3e, 0x44, 0x1d, 0x11, 0x45, 0x8a, 0x82, 0x1e, 0x58, 0xdb, 0x37,
	0x95, 0x7b, 0x6b, 0xa1, 0x37, 0x4f, 0x1a, 0x9b, 0x15, 0x4f, 0x50, 0xaf, 0xde, 0xb8, 0xb2, 0xad,
	0x7e, 0x6b, 0xd0, 0x3d, 0x7f, 0xfb, 0xc8, 0xae, 0xeb, 0x76, 0x3e, 0x9d, 0x0a, 0x19, 0xfa, 0xf7,
	0x3d, 0xca, 0x76, 0xf5, 0xee, 0x4c, 0x5f, 0x55, 0xe1, 0xde, 0x36, 0xd1, 0xf1, 0x7f, 0x2d, 0xca,
	0x1f, 0x63, 0x86, 0x66, 0xe9, 0xa1, 0x99, 0x0a, 0x9f, 0xa2, 0x3d, 0x60, 0x29, 0x55, 0x40, 0xd2,
	0x4c, 0xfb, 0xb5, 0xfc, 0x0d, 0xb0, 0x15, 0xae, 0xd6, 0xd3, 0xe1, 0x6a, 0x6f, 0x87, 0xcb, 0x43,
	0xcf, 0x4d, 0x12, 0x36, 0x5b, 0xa4, 0xa1, 0x49, 0x05, 0x36, 0xd4, 0x78, 0xc3, 0x6c, 0xa7, 0xb1,
	0xf3, 0x70, 0x1a, 0xff, 0xc9, 0xcf, 0xee, 0x03, 0xf9, 0xf9, 0x30, 0xfa, 0xb5, 0x70, 0xac, 0xbb,
	0x85, 0x63, 0xfd, 0x59, 0x38, 0xd6, 0x8f, 0xa5, 0xd3, 0xb8, 0x5b, 0x3a, 0x8d, 0xdf, 0x4b, 0xa7,
	0xf1, 0xed, 0x68, 0xf5, 0x3a, 0xdc, 0xac, 0xdf, 0x09, 0x28, 0x32, 0xaa, 0x2e, 0x3b, 0xfa, 0x5f,
	0x7d, 0xf1, 0x37, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xa9, 0x53, 0x26, 0x47, 0x04, 0x00, 0x00,
}

func (m *QueryStakingInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakingInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakingInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryStakingInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakingInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakingInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryStaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextDistributionHeight != 0 {
		i = encodeVarintQueryStaking(dAtA, i, uint64(m.NextDistributionHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.NumDelegators != 0 {
		i = encodeVarintQueryStaking(dAtA, i, uint64(m.NumDelegators))
		i--
		dAtA[i] = 0x30
	}
	if len(m.HourlyRewards) > 0 {
		i -= len(m.HourlyRewards)
		copy(dAtA[i:], m.HourlyRewards)
		i = encodeVarintQueryStaking(dAtA, i, uint64(len(m.HourlyRewards)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AnnualRewards) > 0 {
		i -= len(m.AnnualRewards)
		copy(dAtA[i:], m.AnnualRewards)
		i = encodeVarintQueryStaking(dAtA, i, uint64(len(m.AnnualRewards)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EffectiveApr) > 0 {
		i -= len(m.EffectiveApr)
		copy(dAtA[i:], m.EffectiveApr)
		i = encodeVarintQueryStaking(dAtA, i, uint64(len(m.EffectiveApr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalStaked) > 0 {
		i -= len(m.TotalStaked)
		copy(dAtA[i:], m.TotalStaked)
		i = encodeVarintQueryStaking(dAtA, i, uint64(len(m.TotalStaked)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TotalSupply) > 0 {
		i -= len(m.TotalSupply)
		copy(dAtA[i:], m.TotalSupply)
		i = encodeVarintQueryStaking(dAtA, i, uint64(len(m.TotalSupply)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakingDistributionHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakingDistributionHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakingDistributionHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintQueryStaking(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintQueryStaking(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakingDistributionHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakingDistributionHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakingDistributionHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintQueryStaking(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Distributions) > 0 {
		for iNdEx := len(m.Distributions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Distributions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryStaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StakingDistributionRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingDistributionRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingDistributionRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumDelegators != 0 {
		i = encodeVarintQueryStaking(dAtA, i, uint64(m.NumDelegators))
		i--
		dAtA[i] = 0x38
	}
	if len(m.EffectiveApr) > 0 {
		i -= len(m.EffectiveApr)
		copy(dAtA[i:], m.EffectiveApr)
		i = encodeVarintQueryStaking(dAtA, i, uint64(len(m.EffectiveApr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RewardsDistributed) > 0 {
		i -= len(m.RewardsDistributed)
		copy(dAtA[i:], m.RewardsDistributed)
		i = encodeVarintQueryStaking(dAtA, i, uint64(len(m.RewardsDistributed)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TotalStaked) > 0 {
		i -= len(m.TotalStaked)
		copy(dAtA[i:], m.TotalStaked)
		i = encodeVarintQueryStaking(dAtA, i, uint64(len(m.TotalStaked)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TotalSupply) > 0 {
		i -= len(m.TotalSupply)
		copy(dAtA[i:], m.TotalSupply)
		i = encodeVarintQueryStaking(dAtA, i, uint64(len(m.TotalSupply)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintQueryStaking(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintQueryStaking(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryStaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryStaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryStakingInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryStakingInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovQueryStaking(uint64(l))
	}
	return n
}

func (m *StakingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TotalSupply)
	if l > 0 {
		n += 1 + l + sovQueryStaking(uint64(l))
	}
	l = len(m.TotalStaked)
	if l > 0 {
		n += 1 + l + sovQueryStaking(uint64(l))
	}
	l = len(m.EffectiveApr)
	if l > 0 {
		n += 1 + l + sovQueryStaking(uint64(l))
	}
	l = len(m.AnnualRewards)
	if l > 0 {
		n += 1 + l + sovQueryStaking(uint64(l))
	}
	l = len(m.HourlyRewards)
	if l > 0 {
		n += 1 + l + sovQueryStaking(uint64(l))
	}
	if m.NumDelegators != 0 {
		n += 1 + sovQueryStaking(uint64(m.NumDelegators))
	}
	if m.NextDistributionHeight != 0 {
		n += 1 + sovQueryStaking(uint64(m.NextDistributionHeight))
	}
	return n
}

func (m *QueryStakingDistributionHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovQueryStaking(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovQueryStaking(uint64(m.Offset))
	}
	return n
}

func (m *QueryStakingDistributionHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Distributions) > 0 {
		for _, e := range m.Distributions {
			l = e.Size()
			n += 1 + l + sovQueryStaking(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovQueryStaking(uint64(m.Total))
	}
	return n
}

func (m *StakingDistributionRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQueryStaking(uint64(m.Height))
	}
	if m.Timestamp != 0 {
		n += 1 + sovQueryStaking(uint64(m.Timestamp))
	}
	l = len(m.TotalSupply)
	if l > 0 {
		n += 1 + l + sovQueryStaking(uint64(l))
	}
	l = len(m.TotalStaked)
	if l > 0 {
		n += 1 + l + sovQueryStaking(uint64(l))
	}
	l = len(m.RewardsDistributed)
	if l > 0 {
		n += 1 + l + sovQueryStaking(uint64(l))
	}
	l = len(m.EffectiveApr)
	if l > 0 {
		n += 1 + l + sovQueryStaking(uint64(l))
	}
	if m.NumDelegators != 0 {
		n += 1 + sovQueryStaking(uint64(m.NumDelegators))
	}
	return n
}

func sovQueryStaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryStaking(x uint64) (n int) {
	return sovQueryStaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryStakingInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakingInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakingInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQueryStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakingInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakingInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakingInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &StakingInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStaked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalStaked = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EffectiveApr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnualRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnnualRewards = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HourlyRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HourlyRewards = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDelegators", wireType)
			}
			m.NumDelegators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDelegators |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextDistributionHeight", wireType)
			}
			m.NextDistributionHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextDistributionHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakingDistributionHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakingDistributionHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakingDistributionHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakingDistributionHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakingDistributionHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakingDistributionHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distributions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distributions = append(m.Distributions, &StakingDistributionRecord{})
			if err := m.Distributions[len(m.Distributions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingDistributionRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingDistributionRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingDistributionRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStaked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalStaked = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsDistributed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsDistributed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EffectiveApr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDelegators", wireType)
			}
			m.NumDelegators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDelegators |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryStaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryStaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryStaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryStaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryStaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryStaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryStaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryStaking = fmt.Errorf("proto: unexpected end of group")
)
