syntax = "proto3";

package mychain.dex.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "mychain/dex/v1/params.proto";

option go_package = "mychain/x/dex/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // CreateOrder defines the CreateOrder RPC.
  rpc CreateOrder(MsgCreateOrder) returns (MsgCreateOrderResponse);

  // CancelOrder defines the CancelOrder RPC.
  rpc CancelOrder(MsgCancelOrder) returns (MsgCancelOrderResponse);

  // ClaimRewards defines the ClaimRewards RPC.
  rpc ClaimRewards(MsgClaimRewards) returns (MsgClaimRewardsResponse);

  // ClaimOrderRewards defines the ClaimOrderRewards RPC.
  rpc ClaimOrderRewards(MsgClaimOrderRewards) returns (MsgClaimOrderRewardsResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "mychain/x/dex/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgCreateOrder defines the MsgCreateOrder message.
message MsgCreateOrder {
  option (cosmos.msg.v1.signer) = "maker";
  string maker = 1;
  uint64 pair_id = 2;
  cosmos.base.v1beta1.Coin price = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin amount = 4 [(gogoproto.nullable) = false];
  bool is_buy = 5;
}

// MsgCreateOrderResponse defines the MsgCreateOrderResponse message.
message MsgCreateOrderResponse {
  uint64 order_id = 1;
}

// MsgCancelOrder defines the MsgCancelOrder message.
message MsgCancelOrder {
  option (cosmos.msg.v1.signer) = "maker";
  string maker = 1;
  uint64 order_id = 2;
}

// MsgCancelOrderResponse defines the MsgCancelOrderResponse message.
message MsgCancelOrderResponse {}

// MsgClaimRewards defines the MsgClaimRewards message.
message MsgClaimRewards {
  option (cosmos.msg.v1.signer) = "user";
  string user = 1;
  string amount = 2 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// MsgClaimRewardsResponse defines the MsgClaimRewardsResponse message.
message MsgClaimRewardsResponse {
  string claimed_amount = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// MsgClaimOrderRewards defines the MsgClaimOrderRewards message.
message MsgClaimOrderRewards {
  option (cosmos.msg.v1.signer) = "user";
  string user = 1;
  repeated uint64 order_ids = 2;
}

// MsgClaimOrderRewardsResponse defines the MsgClaimOrderRewardsResponse message.
message MsgClaimOrderRewardsResponse {
  string claimed_amount = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  repeated uint64 claimed_orders = 2;
}
