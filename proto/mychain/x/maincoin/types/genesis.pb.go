// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mychain/maincoin/v1/genesis.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the maincoin module's genesis state.
type GenesisState struct {
	// params defines all the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// current_epoch is the current epoch number
	CurrentEpoch uint64 `protobuf:"varint,2,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch,omitempty"`
	// current_price is the current price of maincoin
	CurrentPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=current_price,json=currentPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"current_price"`
	// total_supply is the current total supply of maincoin
	TotalSupply cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=total_supply,json=totalSupply,proto3,customtype=cosmossdk.io/math.Int" json:"total_supply"`
	// reserve_balance is the current balance in the reserve pool
	ReserveBalance cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=reserve_balance,json=reserveBalance,proto3,customtype=cosmossdk.io/math.Int" json:"reserve_balance"`
	// dev_allocation_total is the total dev allocation minted
	DevAllocationTotal cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=dev_allocation_total,json=devAllocationTotal,proto3,customtype=cosmossdk.io/math.Int" json:"dev_allocation_total"`
	// pending_dev_allocation is the dev allocation pending for next segment
	PendingDevAllocation cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=pending_dev_allocation,json=pendingDevAllocation,proto3,customtype=cosmossdk.io/math.Int" json:"pending_dev_allocation"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8c516b42a8e3925, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetCurrentEpoch() uint64 {
	if m != nil {
		return m.CurrentEpoch
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "mychain.maincoin.v1.GenesisState")
}

func init() { proto.RegisterFile("mychain/maincoin/v1/genesis.proto", fileDescriptor_d8c516b42a8e3925) }

var fileDescriptor_d8c516b42a8e3925 = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x3f, 0x6f, 0xd4, 0x30,
	0x18, 0xc6, 0x63, 0x5a, 0x0e, 0xd5, 0x3d, 0x40, 0x98, 0x03, 0x59, 0xad, 0x48, 0x03, 0x5d, 0x4e,
	0x0c, 0x89, 0x5a, 0x76, 0x04, 0x51, 0xf9, 0x27, 0x21, 0x51, 0xdd, 0x31, 0xb1, 0x44, 0xae, 0xf3,
	0x2a, 0x67, 0x91, 0xd8, 0x56, 0xec, 0x46, 0xe4, 0x5b, 0xf0, 0x31, 0x18, 0xf9, 0x18, 0x1d, 0x3b,
	0x22, 0x86, 0x0a, 0xdd, 0x0d, 0x4c, 0x7c, 0x07, 0x14, 0xc7, 0xed, 0x81, 0x7a, 0xc3, 0x2d, 0xd6,
	0xab, 0x57, 0xcf, 0xef, 0xf7, 0x7a, 0x78, 0xf0, 0xe3, 0xaa, 0xe5, 0x33, 0x26, 0x64, 0x52, 0x31,
	0x21, 0xb9, 0x12, 0x32, 0x69, 0x0e, 0x92, 0x02, 0x24, 0x18, 0x61, 0x62, 0x5d, 0x2b, 0xab, 0xc8,
	0x7d, 0x1f, 0x89, 0x2f, 0x23, 0x71, 0x73, 0xb0, 0x73, 0x8f, 0x55, 0x42, 0xaa, 0xc4, 0xbd, 0x7d,
	0x6e, 0x67, 0x54, 0xa8, 0x42, 0xb9, 0x31, 0xe9, 0x26, 0xbf, 0x8d, 0x56, 0x1d, 0xd0, 0xac, 0x66,
	0x95, 0xf7, 0x3f, 0xf9, 0xb3, 0x81, 0x87, 0x6f, 0xfa, 0x8b, 0x53, 0xcb, 0x2c, 0x90, 0xe7, 0x78,
	0xd0, 0x07, 0x28, 0x8a, 0xd0, 0x78, 0xfb, 0x70, 0x37, 0x5e, 0xf1, 0x83, 0xf8, 0xd8, 0x45, 0xd2,
	0xad, 0xb3, 0x8b, 0xbd, 0xe0, 0xdb, 0xef, 0xef, 0x4f, 0xd1, 0xc4, 0x53, 0x64, 0x1f, 0xdf, 0xe6,
	0xa7, 0x75, 0x0d, 0xd2, 0x66, 0xa0, 0x15, 0x9f, 0xd1, 0x1b, 0x11, 0x1a, 0x6f, 0x4e, 0x86, 0x7e,
	0xf9, 0xaa, 0xdb, 0x91, 0xb7, 0xcb, 0x90, 0xae, 0x05, 0x07, 0xba, 0x11, 0xa1, 0xf1, 0x56, 0xba,
	0xdf, 0xe9, 0x7e, 0x5e, 0xec, 0xed, 0x72, 0x65, 0x2a, 0x65, 0x4c, 0xfe, 0x39, 0x16, 0x2a, 0xa9,
	0x98, 0x9d, 0xc5, 0xef, 0xa1, 0x60, 0xbc, 0x3d, 0x02, 0x7e, 0x65, 0x3a, 0xee, 0x40, 0xf2, 0x02,
	0x0f, 0xad, 0xb2, 0xac, 0xcc, 0xcc, 0xa9, 0xd6, 0x65, 0x4b, 0x37, 0x9d, 0xe8, 0x91, 0x17, 0x3d,
	0xb8, 0x2e, 0x7a, 0x27, 0xed, 0x64, 0xdb, 0x21, 0x53, 0x47, 0x90, 0xd7, 0xf8, 0x6e, 0x0d, 0x06,
	0xea, 0x06, 0xb2, 0x13, 0x56, 0x32, 0xc9, 0x81, 0xde, 0x5c, 0x47, 0x72, 0xc7, 0x53, 0x69, 0x0f,
	0x91, 0x0f, 0x78, 0x94, 0x43, 0x93, 0xb1, 0xb2, 0x54, 0x9c, 0x59, 0xa1, 0x64, 0xe6, 0xae, 0xd0,
	0xc1, 0x3a, 0x32, 0x92, 0x43, 0xf3, 0xf2, 0x8a, 0xfc, 0xd8, 0x81, 0x64, 0x8a, 0x1f, 0x6a, 0x90,
	0xb9, 0x90, 0x45, 0xf6, 0xbf, 0x98, 0xde, 0x5a, 0x47, 0x39, 0xf2, 0xf0, 0xd1, 0xbf, 0xe6, 0xf4,
	0xf0, 0x6c, 0x1e, 0xa2, 0xf3, 0x79, 0x88, 0x7e, 0xcd, 0x43, 0xf4, 0x75, 0x11, 0x06, 0xe7, 0x8b,
	0x30, 0xf8, 0xb1, 0x08, 0x83, 0x4f, 0xf4, 0xb2, 0x2b, 0x5f, 0x96, 0x6d, 0xb1, 0xad, 0x06, 0x73,
	0x32, 0x70, 0x55, 0x79, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x6e, 0xc8, 0xec, 0xaf, 0x02,
	0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PendingDevAllocation.Size()
		i -= size
		if _, err := m.PendingDevAllocation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.DevAllocationTotal.Size()
		i -= size
		if _, err := m.DevAllocationTotal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.ReserveBalance.Size()
		i -= size
		if _, err := m.ReserveBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalSupply.Size()
		i -= size
		if _, err := m.TotalSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CurrentPrice.Size()
		i -= size
		if _, err := m.CurrentPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.CurrentEpoch != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CurrentEpoch))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.CurrentEpoch != 0 {
		n += 1 + sovGenesis(uint64(m.CurrentEpoch))
	}
	l = m.CurrentPrice.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.TotalSupply.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.ReserveBalance.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.DevAllocationTotal.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.PendingDevAllocation.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpoch", wireType)
			}
			m.CurrentEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReserveBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAllocationTotal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAllocationTotal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingDevAllocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingDevAllocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
