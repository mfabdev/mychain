// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mychain/dex/v1/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// base_transfer_fee_percentage is the base fee percentage for transfers (e.g., 0.005 for 0.5%)
	BaseTransferFeePercentage cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=base_transfer_fee_percentage,json=baseTransferFeePercentage,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"base_transfer_fee_percentage"`
	// min_order_amount is the minimum order amount in base currency
	MinOrderAmount cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=min_order_amount,json=minOrderAmount,proto3,customtype=cosmossdk.io/math.Int" json:"min_order_amount"`
	// lc_initial_supply is the initial supply of LiquidityCoin
	LcInitialSupply cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=lc_initial_supply,json=lcInitialSupply,proto3,customtype=cosmossdk.io/math.Int" json:"lc_initial_supply"`
	// lc_exchange_rate is the initial exchange rate (MC per LC)
	LcExchangeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=lc_exchange_rate,json=lcExchangeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"lc_exchange_rate"`
	// base_reward_rate is the base LC reward rate per second per quote unit
	BaseRewardRate cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=base_reward_rate,json=baseRewardRate,proto3,customtype=cosmossdk.io/math.Int" json:"base_reward_rate"`
	// lc_denom is the denomination for LiquidityCoin
	LcDenom string `protobuf:"bytes,6,opt,name=lc_denom,json=lcDenom,proto3" json:"lc_denom,omitempty"`
	// base_maker_fee_percentage is the flat maker fee (e.g., 0.0001 for 0.01%)
	BaseMakerFeePercentage cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=base_maker_fee_percentage,json=baseMakerFeePercentage,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"base_maker_fee_percentage"`
	// base_taker_fee_percentage is the base taker fee (e.g., 0.0005 for 0.05%)
	BaseTakerFeePercentage cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=base_taker_fee_percentage,json=baseTakerFeePercentage,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"base_taker_fee_percentage"`
	// base_cancel_fee_percentage is the flat cancel fee (e.g., 0.0001 for 0.01%)
	BaseCancelFeePercentage cosmossdk_io_math.LegacyDec `protobuf:"bytes,9,opt,name=base_cancel_fee_percentage,json=baseCancelFeePercentage,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"base_cancel_fee_percentage"`
	// base_sell_fee_percentage is the base sell fee (e.g., 0.0001 for 0.01%)
	BaseSellFeePercentage cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,opt,name=base_sell_fee_percentage,json=baseSellFeePercentage,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"base_sell_fee_percentage"`
	// fee_increment_percentage is the fee increase per 10bp drop below 98% (e.g., 0.0001 for 0.01%)
	FeeIncrementPercentage cosmossdk_io_math.LegacyDec `protobuf:"bytes,11,opt,name=fee_increment_percentage,json=feeIncrementPercentage,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"fee_increment_percentage"`
	// price_threshold_percentage is the price threshold for dynamic fees (e.g., 0.98 for 98%)
	PriceThresholdPercentage cosmossdk_io_math.LegacyDec `protobuf:"bytes,12,opt,name=price_threshold_percentage,json=priceThresholdPercentage,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price_threshold_percentage"`
	// min_transfer_fee is the minimum transfer fee in ulc
	MinTransferFee cosmossdk_io_math.Int `protobuf:"bytes,13,opt,name=min_transfer_fee,json=minTransferFee,proto3,customtype=cosmossdk.io/math.Int" json:"min_transfer_fee"`
	// min_maker_fee is the minimum maker fee in ulc
	MinMakerFee cosmossdk_io_math.Int `protobuf:"bytes,14,opt,name=min_maker_fee,json=minMakerFee,proto3,customtype=cosmossdk.io/math.Int" json:"min_maker_fee"`
	// min_taker_fee is the minimum taker fee in ulc
	MinTakerFee cosmossdk_io_math.Int `protobuf:"bytes,15,opt,name=min_taker_fee,json=minTakerFee,proto3,customtype=cosmossdk.io/math.Int" json:"min_taker_fee"`
	// min_cancel_fee is the minimum cancel fee in ulc
	MinCancelFee cosmossdk_io_math.Int `protobuf:"bytes,16,opt,name=min_cancel_fee,json=minCancelFee,proto3,customtype=cosmossdk.io/math.Int" json:"min_cancel_fee"`
	// min_sell_fee is the minimum sell fee in ulc
	MinSellFee cosmossdk_io_math.Int `protobuf:"bytes,17,opt,name=min_sell_fee,json=minSellFee,proto3,customtype=cosmossdk.io/math.Int" json:"min_sell_fee"`
	// fees_enabled determines if fees are active
	FeesEnabled bool `protobuf:"varint,18,opt,name=fees_enabled,json=feesEnabled,proto3" json:"fees_enabled,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc882712c716f3a1, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetLcDenom() string {
	if m != nil {
		return m.LcDenom
	}
	return ""
}

func (m *Params) GetFeesEnabled() bool {
	if m != nil {
		return m.FeesEnabled
	}
	return false
}

func init() {
	proto.RegisterType((*Params)(nil), "mychain.dex.v1.Params")
}

func init() { proto.RegisterFile("mychain/dex/v1/params.proto", fileDescriptor_dc882712c716f3a1) }

var fileDescriptor_dc882712c716f3a1 = []byte{
	// 609 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0xd4, 0x4d, 0x4f, 0x13, 0x41,
	0x18, 0x07, 0xf0, 0xae, 0x2f, 0xbc, 0x4c, 0xa1, 0xc0, 0x0a, 0x3a, 0x14, 0x29, 0xa8, 0x17, 0x62,
	0x62, 0x1b, 0xe2, 0xcd, 0x8b, 0xe1, 0x4d, 0xd3, 0x44, 0x22, 0x29, 0x9c, 0x8c, 0x3a, 0x0e, 0xb3,
	0x4f, 0xdb, 0x09, 0xf3, 0xb2, 0x99, 0x1d, 0xb0, 0xfd, 0x0a, 0x1e, 0x8c, 0x1f, 0xc1, 0x8f, 0xe0,
	0xc7, 0xe0, 0xc8, 0xd1, 0x78, 0x20, 0x06, 0x0e, 0xfa, 0x31, 0xcc, 0x4c, 0xbb, 0x4d, 0xa1, 0x1e,
	0x86, 0x4b, 0xb3, 0x3b, 0xdd, 0xe7, 0xf7, 0xec, 0xcc, 0xfe, 0x67, 0xd0, 0x92, 0xec, 0xb2, 0x36,
	0xe5, 0xaa, 0x96, 0x40, 0xa7, 0x76, 0xb2, 0x5e, 0x4b, 0xa9, 0xa1, 0x32, 0xab, 0xa6, 0x46, 0x5b,
	0x1d, 0x97, 0xfa, 0x7f, 0x56, 0x13, 0xe8, 0x54, 0x4f, 0xd6, 0xcb, 0x73, 0x54, 0x72, 0xa5, 0x6b,
	0xfe, 0xb7, 0xf7, 0x48, 0x79, 0xbe, 0xa5, 0x5b, 0xda, 0x5f, 0xd6, 0xdc, 0x55, 0x6f, 0xf4, 0xf1,
	0xd7, 0x22, 0x1a, 0xdb, 0xf3, 0x52, 0x9c, 0xa0, 0x87, 0x87, 0x34, 0x03, 0x62, 0x0d, 0x55, 0x59,
	0x13, 0x0c, 0x69, 0x02, 0x90, 0x14, 0x0c, 0x03, 0x65, 0x69, 0x0b, 0x70, 0xb4, 0x1a, 0xad, 0x4d,
	0x6e, 0x3e, 0x39, 0x3d, 0x5f, 0x29, 0xfc, 0x3a, 0x5f, 0x59, 0x62, 0x3a, 0x93, 0x3a, 0xcb, 0x92,
	0xa3, 0x2a, 0xd7, 0x35, 0x49, 0x6d, 0xbb, 0xfa, 0x06, 0x5a, 0x94, 0x75, 0xb7, 0x81, 0x35, 0x16,
	0x1d, 0x74, 0xd0, 0x77, 0x5e, 0x01, 0xec, 0x0d, 0x94, 0xf8, 0x35, 0x9a, 0x95, 0x5c, 0x11, 0x6d,
	0x12, 0x30, 0x84, 0x4a, 0x7d, 0xac, 0x2c, 0xbe, 0xe5, 0xe5, 0xe5, 0xbe, 0xbc, 0x30, 0x2a, 0xd7,
	0x95, 0x6d, 0x94, 0x24, 0x57, 0x6f, 0x5d, 0xd5, 0x86, 0x2f, 0x8a, 0xeb, 0x68, 0x4e, 0x30, 0xc2,
	0x15, 0xb7, 0x9c, 0x0a, 0x92, 0x1d, 0xa7, 0xa9, 0xe8, 0xe2, 0xdb, 0x21, 0xd2, 0x8c, 0x60, 0xf5,
	0x5e, 0xd9, 0xbe, 0xaf, 0x8a, 0x77, 0xd1, 0xac, 0x60, 0x04, 0x3a, 0xac, 0x4d, 0x55, 0x0b, 0x88,
	0xa1, 0x16, 0xf0, 0x9d, 0xf0, 0xd9, 0x96, 0x04, 0xdb, 0xe9, 0xd7, 0x36, 0xa8, 0xf5, 0x53, 0xf4,
	0x0b, 0x69, 0xe0, 0x33, 0x35, 0x49, 0x8f, 0xbb, 0x1b, 0x34, 0x45, 0x57, 0xd6, 0xf0, 0x55, 0x1e,
	0x5a, 0x44, 0x13, 0x82, 0x91, 0x04, 0x94, 0x96, 0x78, 0xcc, 0x01, 0x8d, 0x71, 0xc1, 0xb6, 0xdd,
	0x6d, 0xfc, 0x11, 0xf9, 0x35, 0x26, 0x92, 0x1e, 0x8d, 0x7e, 0xa9, 0xf1, 0xf0, 0x77, 0xbf, 0xef,
	0x94, 0x5d, 0x87, 0x5c, 0xfd, 0x4c, 0xb9, 0x6f, 0xff, 0xe7, 0x4f, 0xdc, 0xd0, 0x3f, 0x18, 0xf5,
	0x3f, 0xa1, 0xb2, 0xf7, 0x19, 0x55, 0x0c, 0xc4, 0xf5, 0x06, 0x93, 0xe1, 0x0d, 0x1e, 0x38, 0x66,
	0xcb, 0x2b, 0x57, 0x3b, 0xbc, 0x47, 0xd8, 0x77, 0xc8, 0x40, 0x8c, 0xf8, 0x28, 0xdc, 0x5f, 0x70,
	0xc8, 0x3e, 0x88, 0x6b, 0xfa, 0x07, 0x84, 0x9d, 0xc9, 0x15, 0x33, 0x20, 0x41, 0xd9, 0x61, 0xbd,
	0x78, 0x83, 0xe5, 0x69, 0x02, 0xd4, 0x73, 0x63, 0x88, 0xa7, 0xa8, 0x9c, 0x1a, 0xce, 0x80, 0xd8,
	0xb6, 0x81, 0xac, 0xad, 0x45, 0x32, 0xdc, 0x60, 0x2a, 0xbc, 0x01, 0xf6, 0xcc, 0x41, 0xae, 0x8c,
	0x6e, 0xc4, 0xe1, 0xdd, 0x8e, 0xa7, 0x43, 0x37, 0xe2, 0xd0, 0xde, 0x8e, 0x37, 0xd0, 0xb4, 0x83,
	0x06, 0x49, 0xc4, 0xa5, 0x10, 0xa5, 0x28, 0xb9, 0xca, 0x73, 0x97, 0x13, 0x83, 0xb0, 0xe1, 0x99,
	0x50, 0x22, 0x8f, 0x56, 0xbc, 0x85, 0xdc, 0x7b, 0x0d, 0xe5, 0x09, 0xcf, 0x86, 0x18, 0x53, 0x92,
	0xab, 0x41, 0x7a, 0xe2, 0x97, 0xc8, 0xdd, 0x0f, 0x22, 0x83, 0xe7, 0x42, 0x08, 0x24, 0xb9, 0xea,
	0x07, 0x24, 0x7e, 0x84, 0xa6, 0x9a, 0x00, 0x19, 0x01, 0x45, 0x0f, 0x05, 0x24, 0x38, 0x5e, 0x8d,
	0xd6, 0x26, 0x1a, 0x45, 0x37, 0xb6, 0xd3, 0x1b, 0x7a, 0xb1, 0xfc, 0xf7, 0xfb, 0x4a, 0xf4, 0xe5,
	0xcf, 0x8f, 0xa7, 0xf3, 0xf9, 0x81, 0xde, 0xf1, 0x47, 0x7a, 0xef, 0x14, 0xde, 0x7c, 0x76, 0x7a,
	0x51, 0x89, 0xce, 0x2e, 0x2a, 0xd1, 0xef, 0x8b, 0x4a, 0xf4, 0xed, 0xb2, 0x52, 0x38, 0xbb, 0xac,
	0x14, 0x7e, 0x5e, 0x56, 0x0a, 0xef, 0xee, 0x5d, 0x7d, 0xde, 0x76, 0x53, 0xc8, 0x0e, 0xc7, 0xfc,
	0x31, 0xfe, 0xfc, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x3e, 0x4c, 0xbf, 0x1e, 0x06, 0x00,
	0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BaseTransferFeePercentage.Equal(that1.BaseTransferFeePercentage) {
		return false
	}
	if !this.MinOrderAmount.Equal(that1.MinOrderAmount) {
		return false
	}
	if !this.LcInitialSupply.Equal(that1.LcInitialSupply) {
		return false
	}
	if !this.LcExchangeRate.Equal(that1.LcExchangeRate) {
		return false
	}
	if !this.BaseRewardRate.Equal(that1.BaseRewardRate) {
		return false
	}
	if this.LcDenom != that1.LcDenom {
		return false
	}
	if !this.BaseMakerFeePercentage.Equal(that1.BaseMakerFeePercentage) {
		return false
	}
	if !this.BaseTakerFeePercentage.Equal(that1.BaseTakerFeePercentage) {
		return false
	}
	if !this.BaseCancelFeePercentage.Equal(that1.BaseCancelFeePercentage) {
		return false
	}
	if !this.BaseSellFeePercentage.Equal(that1.BaseSellFeePercentage) {
		return false
	}
	if !this.FeeIncrementPercentage.Equal(that1.FeeIncrementPercentage) {
		return false
	}
	if !this.PriceThresholdPercentage.Equal(that1.PriceThresholdPercentage) {
		return false
	}
	if !this.MinTransferFee.Equal(that1.MinTransferFee) {
		return false
	}
	if !this.MinMakerFee.Equal(that1.MinMakerFee) {
		return false
	}
	if !this.MinTakerFee.Equal(that1.MinTakerFee) {
		return false
	}
	if !this.MinCancelFee.Equal(that1.MinCancelFee) {
		return false
	}
	if !this.MinSellFee.Equal(that1.MinSellFee) {
		return false
	}
	if this.FeesEnabled != that1.FeesEnabled {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeesEnabled {
		i--
		if m.FeesEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	{
		size := m.MinSellFee.Size()
		i -= size
		if _, err := m.MinSellFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size := m.MinCancelFee.Size()
		i -= size
		if _, err := m.MinCancelFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.MinTakerFee.Size()
		i -= size
		if _, err := m.MinTakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size := m.MinMakerFee.Size()
		i -= size
		if _, err := m.MinMakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.MinTransferFee.Size()
		i -= size
		if _, err := m.MinTransferFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.PriceThresholdPercentage.Size()
		i -= size
		if _, err := m.PriceThresholdPercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.FeeIncrementPercentage.Size()
		i -= size
		if _, err := m.FeeIncrementPercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.BaseSellFeePercentage.Size()
		i -= size
		if _, err := m.BaseSellFeePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.BaseCancelFeePercentage.Size()
		i -= size
		if _, err := m.BaseCancelFeePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.BaseTakerFeePercentage.Size()
		i -= size
		if _, err := m.BaseTakerFeePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.BaseMakerFeePercentage.Size()
		i -= size
		if _, err := m.BaseMakerFeePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.LcDenom) > 0 {
		i -= len(m.LcDenom)
		copy(dAtA[i:], m.LcDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.LcDenom)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.BaseRewardRate.Size()
		i -= size
		if _, err := m.BaseRewardRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.LcExchangeRate.Size()
		i -= size
		if _, err := m.LcExchangeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.LcInitialSupply.Size()
		i -= size
		if _, err := m.LcInitialSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MinOrderAmount.Size()
		i -= size
		if _, err := m.MinOrderAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.BaseTransferFeePercentage.Size()
		i -= size
		if _, err := m.BaseTransferFeePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BaseTransferFeePercentage.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinOrderAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.LcInitialSupply.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.LcExchangeRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.BaseRewardRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = len(m.LcDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.BaseMakerFeePercentage.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.BaseTakerFeePercentage.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.BaseCancelFeePercentage.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.BaseSellFeePercentage.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.FeeIncrementPercentage.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.PriceThresholdPercentage.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinTransferFee.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinMakerFee.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinTakerFee.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinCancelFee.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.MinSellFee.Size()
	n += 2 + l + sovParams(uint64(l))
	if m.FeesEnabled {
		n += 3
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTransferFeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseTransferFeePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOrderAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinOrderAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LcInitialSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LcInitialSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LcExchangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LcExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRewardRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseRewardRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LcDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LcDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseMakerFeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseMakerFeePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTakerFeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseTakerFeePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseCancelFeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseCancelFeePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseSellFeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseSellFeePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeIncrementPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeIncrementPercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceThresholdPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PriceThresholdPercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTransferFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinTransferFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinMakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinMakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinTakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCancelFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinCancelFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSellFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSellFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeesEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FeesEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
